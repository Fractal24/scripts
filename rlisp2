#!/usr/bin/env ruby

require 'readline'
require 'sexpistol'

class Rlisp
  OPERATORS = %i[== != < <= > >= + - * /]

  def initialize(ext = {})
    @quit = false
    @env = {:true=>true, :false=>false, :nil=>nil}

    OPERATORS.inject({}) do |scope, operator|
      @env.merge!(operator => lambda { |*args| args.inject(&operator) })
    end
    DATA.each do |line|
      run(line)
    end
    specials = [:quote, :define, :quit, :lambda, :if, :require, :defun,
                :defvar, :true, :false, :nil]
    comp = proc{ |s| (@env.keys + specials).grep( /^#{Regexp.escape(s)}/)}
    Readline.completion_append_character = " "
    Readline.completion_proc = comp
  end

  def find(symbol, env)
    if env[symbol]
      env[symbol]
    elsif Kernel.eval "defined? #{symbol.to_s}"
      Kernel.eval symbol.to_s
    else
      nil
    end
  end
  
  def run(code)
    eval(parse(code).first)
  end

  def parse(program)
    Sexpistol.new.parse_string(program)
  end

  def eval(exp, env = @env)
    if exp.is_a?(Numeric) || exp.is_a?(String)
      exp
    elsif exp.is_a? Symbol
      find(exp, env)
    elsif exp[0] == :quote
      exp[1]
    elsif exp[0] == :if
      _, test, conseq, alt = exp
      exp = eval(test, env) ? conseq : alt
      eval(exp, env)
    elsif exp[0] == :define
      _, var, e = exp
      if (var.is_a? Array)
        name = var.shift
        env[name] = lambda { |*args|
          self.eval(e, env.merge(Hash[var.zip(args)])) }
      else
        env[var] = eval(e, env)
      end
    elsif exp[0] == :defvar
      _, var, e = exp
      env[var] = eval(e, env)
    elsif exp[0] == :defun
      _, name, var, e = exp
      env[name] = lambda { |*args|
        self.eval(e, env.merge(Hash[var.zip(args)])) }
    elsif exp[0] == :lambda
      _, params, e = exp
      lambda { |*args| self.eval(e, env.merge(Hash[params.zip(args)])) }
    elsif exp[0] == :ruby
      _, params, e = exp
      procstring = "->(#{params.collect{|x| x.to_s}.join(',')}) {#{e}}"
      Kernel.eval(procstring)
    elsif exp[0] == :require
      _, e = exp
      e.shift
      e.each {|x| require x.to_s}
      true
    elsif exp[0] == :quit
      @quit = true
    else
      code = eval(exp[0], env)
      args = exp[1..-1].map{ |arg| eval(arg, env) }
      code.(*args)
    end
  end

  def repl(prompt = '> ')
    while !@quit
      line = Readline::readline(prompt)
      break if line.nil?
      Readline::HISTORY.push(line)
      begin
        result = run(line)
        print result.to_s+"\n" if !@quit
      rescue Exception => e
        p e
      end
    end
  end
end


rlisp = Rlisp.new
rlisp.repl

__END__
(define list (ruby (*list) "Array(list)"))
(define car (ruby (list) "list.first"))
(define cdr (ruby (list) "list.drop 1"))
(define null? (ruby (list) "list.empty?"))
(define cons (ruby (e cell) "[e] + cell"))
(define map (ruby (fn list) "list.map {|x| fn.call x}"))
(define reduce (ruby (fn *args) "if args.size == 1;args[0].reduce &fn;else;args[1].reduce args[0],&fn;end"))
(define succ (ruby (x) "x.succ"))
(define pred (ruby (x) "x.pred"))
(define class (ruby (x) "x.class"))
(define methods (ruby (x) "x.methods"))
(define send (ruby (x *args) "x.send *args"))
(define max (ruby (list) "list.max"))
(define min (ruby (list) "list.min"))
(define (range x y) (if (< x y) (cons x (range (+ 1 x) y)) (list)))
(define (positive? x) (> x 0))
(define (negative? x) (< x 0))
(define length (ruby (x) "x.length"))
