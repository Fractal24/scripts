#!/usr/bin/env ruby

require 'readline'

class Rlisp
  OPERATORS = %i[== != < <= > >= + - * /]

  def initialize(ext = {})
    @env = {
      :list  => -> (*list) { Array(list) },
      :null? => -> (list) { list.empty? },
      :min   => -> (list) { list.min },
      :max   => -> (list) { list.max },
      :car   => -> (list) { list[0] },
      :cdr   => -> (list) { list.drop 1 },
      :cons  => -> (e, cell) { [e] + cell },
      :map => -> (fn, list) {list.map {|x| fn.call x}},
      :reduce => -> (fn, *args) {if args.size == 1;args[0].reduce(&fn);
      else;args[1].reduce(args[0], &fn);end}
    }.merge(ext)

    OPERATORS.inject({}) do |scope, operator|
      @env.merge!(operator => lambda { |*args| args.inject(&operator) })
    end

    run("(define (range x y) (if (< x y) (cons x (range (+ 1 x) y)) (list)))")

    comp = proc{ |s| @env.keys.grep( /^#{Regexp.escape(s)}/) }

    Readline.completion_append_character = " "
    Readline.completion_proc = comp
  end

  def run(code)
    self.eval parse(code)
  end

  def parse(program)
    read_from_tokens(tokenize(program))
  end

  def tokenize(chars)
    chars
      .gsub(/\s\s+/, ' ')
      .gsub('(', ' ( ')
      .gsub(')', ' ) ')
      .split(' ')
  end

  def read_from_tokens(tokens)
    return if tokens.empty?

    token = tokens.shift
    
    if '(' == token
      list = []

      while tokens.first != ')'
        list << read_from_tokens(tokens)
      end
      tokens.shift

      list
    elsif ')' == token
      raise 'unexpected )'
    else
      atom(token)
    end
  end

  def atom(token)
    if token[/\.\d+/]
      token.to_f
    elsif token[/\d+/]
      token.to_i
    else
      token.to_sym
    end
  end

  def eval(exp, env = @env)
    if exp.is_a? Numeric
      exp
    elsif exp.is_a? Proc
      Proc.to_source
    elsif exp[0] == '"'
      exp.to_s
    elsif exp.is_a? Symbol
      if exp[0] == "."
      else
        env[exp]
      end
    elsif exp[0] == :quote
      exp[1]
    elsif exp[0] == :if
      _, test, conseq, alt = exp
      exp = eval(test, env) ? conseq : alt
      eval(exp, env)
    elsif exp[0] == :define
      _, var, e = exp
      if (var.is_a? Array)
        name = var.shift
        env[name] = lambda { |*args|
          self.eval(e, env.merge(Hash[var.zip(args)])) }
      else
        env[var] = eval(e, env)
      end
    elsif exp[0] == :lambda
      _, params, e = exp
      lambda { |*args| self.eval(e, env.merge(Hash[params.zip(args)])) }
    else
      code = eval(exp[0], env)
      args = exp[1..-1].map{ |arg| eval(arg, env) }
      code.(*args)
    end
  end

  def repl(prompt = '> ')
    loop do
      line = Readline::readline(prompt)
      break if line.nil? || line == 'quit'
      Readline::HISTORY.push(line)
      begin
        result = run(line)
        print result.to_s+"\n"
      rescue Exception => e
        p e
      end
    end
  end
end


rlisp = Rlisp.new
rlisp.repl
