#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'rubygems'
require 'DBwrapper'
require 'csv'

opt = OpenStruct.new
o = OptionParser.new
opt.host = "mysql-lan-pro"
opt.storage = "misc_apis"
o.banner << " dataset isotigs.csv pep.txt annotation_rules.combined.out"
o.on("-h ", "--host ", String, "database host (default #{opt.host})") {|h| opt.host = h}
o.on("-s ", "--storage ", String, "storage database") {|s| opt.storage = s}

begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 4)
  STDERR << o
  exit(1)
end

dataset, isotigs, pep, rules = ARGV

expression = Hash.new
CSV.foreach(isotigs) do |row|
  expression[row.first] = row
end

db = MySQL.new(opt.host, opt.storage, "apis", "apis_user")
phylodb = MySQL.new("mysql-lan-pro","phylodb", "apis", "apis_user")


peps = Hash.new
File.new(pep).each do |line|
  isotig, pep = line.chomp.split(" ")
  peps[isotig] = [] if peps[isotig].nil?
  peps[isotig].push(pep)
end

go = Hash.new
ec = Hash.new

File.new(rules).each do |line|
  fields = line.chomp.split("\t")
  name = fields.shift
  1.upto(fields.size) do |i|
    go[name] = fields[i] if fields[i - 1] == "GO"
    ec[name] = fields[i] if fields[i - 1] == "EC"
  end
end


phytax = Hash.new
kegg = Hash.new

annh = ["ORF", "Has Tree?","APIS Annotation", "GO", "EC", "Phytax Cluster", "Kegg Ortholog"]*5
header = ["Contigs","T0C","T0V","T24C","T23V","T2V","T4C","T4V","T6V","T8V","Sum"] + annh
print header.to_csv

counter = 0
peps.keys.sort.each do |isotig|
  if (!expression[isotig])
    STDERR.printf("No expression data for %s\n", isotig)
    next
  end
  outrow = expression[isotig]
  query = "SELECT seq_name, LENGTH(sequence) as l from sequence "
  query += "WHERE dataset = \"#{dataset}\" AND seq_name IN ("
  peps[isotig].each do |p|
    query +='"'+p+'",'
  end
  query.chop!
  query +=") ORDER by l DESC"
  db.query(query).each do |row|
    name, len = row
    sname = db.fetchTopBlastHit(name, dataset)
    tree = db.fetchTree(name, dataset)
    if (tree.nil?)
      tree = "N"
    else
      tree = "Y"
    end
    ann = db.fetchAPISAnnotation(name, dataset)
    phytax[sname] = phylodb.fetchPhyTaxCluster(sname) if (sname && !phytax[sname])
    kegg[sname] = phylodb.fetchKeggCluster(sname) if (sname && !kegg[sname])
    outrow.push(name, tree, ann, go[name], ec[name], 
      phytax[sname], kegg[sname])
  end
  print outrow.to_csv
  counter += 1
  STDERR.printf("Writing isotig %s....\n", counter) if (counter % 100 == 0)
end


db.close
phylodb.close