#!/usr/bin/env ruby
# provides some information about sequence(s) in a FASTA file

require 'rubygems'
require 'trollop'
require 'bio'
require 'ZFile'
require 'csv'


ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "input sequence file(s)", :required=>true, :type=>:strings
  opt :csv, "output as csv", :default=>false
  opt :total, "run all sequences in each file as one", :default=>false
  opt :fastq, "use fastq format", :default=>false
end

if (opts.csv)
  print ["Name", "Sequences", "Avg. Length", "% Ambiguous bases", "%GC"].to_csv
end

if (opts.fastq)
  format = Bio::Fastq
else
  format = Bio::FastaFormat
end

opts.input.each do |file|
  tLen = 0
  tgc = 0
  tat = 0
  tam = 0
  count  = 0
  min = 1e99
  max = 0
  stream = ZFile.new(file)
  Bio::FlatFile.new(format, stream).each do |seq|
    gc =  seq.seq.count("GCgc")
    at =  seq.seq.count("ATUatu")
    ambig = seq.seq.count("NRYWSnryws")
    max = seq.seq.length if seq.seq.length > max
    min = seq.seq.length if seq.seq.length < min
    if (!opts.total)
      gcper = ((gc*100.0) / (gc + at)).round
      amper = ((ambig*100.0)/seq.seq.length).round
      if (opts.csv)
        print [seq.definition, 1, seq.length, amper, gcper].to_csv
      else
        printf("---%s---\n", seq.definition)
        printf("Length: %d (%.1f megabases)\n", seq.seq.length, seq.seq.length / 1.0e6)
        printf("%% Ambiguous %d%%\n", amper)
        printf("GC:     %d%%\n", gcper)
      end
    else
      tLen += seq.seq.length
      tgc +=  gc
      tat += at
      tam += ambig
      count += 1
    end
  end
  stream.close
  if (opts.total)
    avg = (tLen/count.to_f).round
    gcper = ((tgc*100.0) / (tgc + tat)).round
    amper = (100*tam/tLen.to_f).round
    if (opts.csv)
      print [file, count, avg, amper, gcper].to_csv
    else
      printf("---%s---\n", file)
      printf("Sequences: %d\n", count)
      printf("Length: %d (%.1f megabases)\n", tLen, tLen / 1.0e6)
      printf("Minimum length: %d Maximum length: %d\n", min, max)
      printf("Average length: %d (%.1f megabases)\n", avg, avg / (count*1.0e6))
      printf("%% Ambiguous: %d%\n", amper)
      printf("GC:     %d bp %d%%\n", tgc, gcper)
    end
  end
end
