#!/usr/bin/env ruby

require 'Apis_Active'
require 'optparse'
require 'ostruct'
require 'GOS'

opt = OpenStruct.new
opt.host = "mysql://access:access@mysql-lan-pro/gosii_io_454_apis"
opt.filter = false
opt.exp = nil
opt.cl = nil

o = OptionParser.new
o.banner << " dataset [dataset...]"
o.on("-c ", "--classification ", String, "classification string like kingdom = 'Bacteria'") {|t| opt.cl = t}
o.on("-h ", "--host ", String, "database host (#{opt.host})") {|t| opt.host = t}
o.on("-e ", "--expression ", String, "include datasets matching substring") {|t| opt.exp = t}
o.on("-z ", "--filter ", Float, "limit to a specific filter") {|t| opt.filter = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1 && !opt.exp)
  STDERR << o
  exit(1)
end

connectDB(opt.host)

if (opt.exp)
  datasets = Apisrun.select(:dataset).where("dataset like '%#{opt.exp}%'").collect{|x| x.dataset}
else
  datasets = ARGV
end


datasets.each do |dataset|
 site, filter = siteName(dataset),classifySample(dataset)
 outName = site
 outName += "_" + opt.cl.split("=").last.gsub("'","") if (opt.cl)
 outName += "_" + filter.to_s
 next if (opt.filter && opt.filter.to_s != filter.to_s)
 query = "SELECT sequence.seq_name, sequence from sequence"
 if (opt.cl)
   query += " JOIN classification ON classification.dataset = sequence.dataset"
   query += " AND classification.seq_name = sequence.seq_name"
 end
 query += " WHERE sequence.dataset = '#{dataset}'"
 query += " AND " + opt.cl if (opt.cl)
 p dataset
 STDERR << "Writing #{outName}...\n"
 results = Sequence.connection.execute(query)
 out = File.new(outName + ".pep", "w+")
 results.each do |row|
   out.printf(">%s\n%s", row.first, 
    row.last.gsub(Regexp.new(".{1,60}"), "\\0\n"))
 end
 out.close
end