#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'GeneExpression'
require 'csv'

opt = OpenStruct.new
o = OptionParser.new
opt.num = 1000
opt.lines = nil

o.banner << " expression-csv"
o.on("-l", "--lines ", Integer, "number of random lines per simulation") {|t| opt.lines = t}
o.on("-n", "--number ", Integer, "number of simulations (#{opt.num})") {|t| opt.num = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 1)
  STDERR << o
  exit(1)
end



STDERR << "Loading Spreadsheet...\n"
table = CSV.read(ARGV.first, {:headers => true, :converters => :numeric})

STDERR << "Simulating results...\n"
totals = []

i = 0
table.headers.each do |col|
  next if (col == "Contigs" || col == "Isogroup" || col == "Gene" || col == "Protein" || col == "Species")
  break if (col == "Sum" || col == "Total")
  totals[i] = table[col].last
  i += 1
end

rvalues = []
opt.num.times do |i|
  STDERR << "Simulation " << i << "...\n"
  rownum = 0
  picked = Hash.new
  if (opt.lines)
    opt.lines.times do |i|
      picked[rand(table.size)] = true
    end
  end  
  table.each do |row|
    next if row.first.last.to_s == "" # skip totals line
    next if opt.lines && !picked[rownum]
    counts = []
    totals.size.times do |i|
      sum = row["Sum"]
      sum = row["Total"] if sum.nil?
      expected = ((sum / totals.reduce(:+).to_f) * totals[i]).to_i
      counts[i] = GeneExpression.poisson(expected)
    end
    rvalues.push(GeneExpression.rvalue(totals, counts))
    rownum += 1
  end
end
rvalues.sort!
pos95 = (rvalues.size*0.95).to_i
pos98 = (rvalues.size*0.98).to_i
pos99 = (rvalues.size*0.99).to_i

STDOUT << "Average Simulated R-value: " << (rvalues.reduce(:+)/rvalues.size*100).to_i/100.0 << "\n"
STDOUT << "95% Threshold: " << (rvalues[pos95]*100).to_i/100.0 << "\n"
STDOUT << "98% Threshold: " << (rvalues[pos98]*100).to_i/100.0 << "\n"
STDOUT << "99% Threshold: " << (rvalues[pos99]*100).to_i/100.0 << "\n"