#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'bio'
require 'apis_lib'
require 'Newick'
require 'fpdf'

$VERBOSE = nil
raxml = `which raxmlHPC`.chomp

if raxml == ""
  STDERR << "I can't find raxmlHPC on your path!\n"
  exit(1)
end

origARGV = ARGV.dup # keep unparsed copy for grid

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "fasta alignment(s)", :required =>true, :type =>:strings
  opt :bootstrap, "number of bootstraps (or 0 to not bootstrap)", :default=>0, :type=>:integer
  opt :model, "model (default: GTRGAMMA, PROTGAMMAWAGF)", :type=>:string
  opt :outgroup, "use specified taxon as outgroup", :type=>:string
  opt :seed, "seed for bootstrap analysis", :type=>:integer, :default=>1234
  opt :unrooted, "leave tree unrooted"
  opt :project, "run on grid with project number specified", :type=>:string
end

if (opts.project)
  cmd = cmdLine($0, opts, [:project, :input])
  opts.input.each do |input|
    qsystem(cmd + " --input #{input}", opts.project)
  end
  exit(0)
end

opts.input.each do |fasta|
  name = File.basename(fasta).split(".").first
  tmpdir = ENV["HOME"] + "/.tmp"
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tmpdir += "/" + name + "_" + Time.now.to_f.to_s
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tname = tmpdir + "/" + name
  dna = isDNA?(fasta)
  model = opts.model
  if (!model)
    if (dna)
      model = "GTRGAMMA"
    else
      model = "PROTGAMMAWAGF"
    end
  end
  aliHash = aliasFasta(fasta, nil, tname, opts.trim)
  fasta2Phylip(tname, tname + ".phy")
  if (opts.bootstrap > 0)
    boot = "-f a -x #{opts.seed} -# #{opts.bootstrap}"
  else
    boot = ""
  end
  system("cd #{tmpdir};#{raxml} -p #{opts.seed} #{boot} -m #{model} -n #{name} -s #{tname}.phy")
  if (opts.bootstrap > 0)
    tree = NewickTree.fromFile("#{tmpdir}/RAxML_bipartitions.#{name}")
  else
    tree = NewickTree.fromFile("#{tmpdir}/RAxML_result.#{name}")
  end
  tree.unAlias(aliHash)
  if (opts.outgroup)
    outNode = tree.findNode(opts.outgroup)
    if (outNode.nil?)
      STDERR.printf("taxon #{opts.outgroup} not found in tree!\n")
    elsif (!opts.unrooted)
      tree = tree.reroot(outNode)
    end 
  else
    tree = tree.midpointRoot
  end  
  tree.write("#{name}_raxml.tree")
  tree.draw("#{name}_raxml.tree.pdf")
  File.link("#{tmpdir}/RAxML_info.#{name}", "#{name}_raxml.info")
  cleanup(tmpdir)
end
