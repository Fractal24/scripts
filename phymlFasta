#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'bio'
require 'apis_lib'
require 'Newick'
require 'fpdf'

phyml = `which phyml`.chomp

if phyml == ""
  STDERR << "I can't find phyml on your path!\n"
  exit(1)
end

origARGV = ARGV.dup # keep unparsed copy for grid

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "fasta alignment(s)", :required =>true, :type =>:strings
  opt :bootstrap, "number of bootstraps (or 0 to use fast SH-like branch supports)", :default=>0, :type=>:integer
  opt :model, "model (default: GTR, WAG)", :type=>:string
  opt :outgroup, "use specified taxon as outgroup", :type=>:string
  opt :unrooted, "leave tree unrooted"
  opt :project, "run on grid with project number specified", :type=>:string
end

if (opts.project)
  qsystem($0 + " " + origARGV.join(" ").gsub(/ [\-p|\-\-project] [0-9]*/,""), opts.project)
  exit(0)
end

opts.input.each do |fasta|
  name = File.basename(fasta).split(".").first
  tmpdir = ENV["HOME"] + "/.tmp"
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tmpdir += "/" + name + "_" + Time.now.to_f.to_s
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tname = tmpdir + "/" + name
  dna = isDNA?(fasta)
  model = opts.model
  if (!model)
    if (dna)
      model = "GTR"
      data = "nt"
    else
      model = "WAG"
      data = "aa"
    end
  end
  aliHash = aliasFasta(fasta, nil, tname, opts.trim)
  fasta2Phylip(tname, tname + ".phy")
  if (opts.bootstrap > 0)
    boot = "-b #{opts.bootstrap}"
  else
    boot = "-b -4"
  end
  system("cd #{tmpdir};#{phyml} --no_memory_check -d #{data} -m #{model} -i #{tname}.phy")
  tree = NewickTree.fromFile("#{tmpdir}/#{name}.phy_phyml_tree.txt")
  tree.unAlias(aliHash)
  if (opts.outgroup)
    outNode = tree.findNode(opts.outgroup)
    if (outNode.nil?)
      STDERR.printf("taxon #{opts.outgroup} not found in tree!\n")
    else
      tree = tree.reroot(outNode)
    end 
  elsif (!opts.unrooted)
    tree = tree.midpointRoot
  end  
  tree.write("#{name}_phyml.tree")
  tree.draw("#{name}_phyml.tree.pdf")
  system("cp #{tmpdir}/#{name}.phy_phyml_stats.txt #{name}_phyml_stats.txt")
  cleanup(tmpdir)
end
