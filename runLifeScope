#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "input xsq file(s) to map", :required=>true, :type=>:strings
  opt :workflow, "workflow", :default=>"whole.transcriptome.pe", :type=>:string
  opt :project, "project name", :required=>true, :type=>:string
  opt :reference, "mapping reference", :required=>true, :type=>:string
  opt :user, "user", :default=>"lifescope", :type=>:string
  opt :password, "password", :default=>"lifescope", :type=>:string
end

dirname = "/data/lifescope_data/projects/#{opts.user}/#{opts.project}"
if (!File.exists?(dirname))
  Dir.mkdir(dirname)
  STDERR << "Making " << dirname << "\n"
end

mk = true
outFile = File.new("project.pln", "w")
ARGV.each do |xsq|
  lib = File.basename(xsq, ".xsq").split("-").last
  ldir = dirname + "/" + lib
  if (!File.exists?(ldir))
    Dir.mkdir(ldir)
    STDERR << "Making " << ldir << "\n"
  end
  if (Dir.glob(ldir + "/*").empty?)
    outFile.printf("cd /projects\n")
    outFile.printf("mk %s\n", opts.project) if mk
    outFile.printf("cd %s\n", opts.project)
    outFile.printf("mk %s\n", lib)
    outFile.printf("cd %s\n", lib)
    outFile.printf("set workflow %s\n",opts.workflow)
    outFile.printf("add xsq %s\n", xsq)
    outFile.printf("set reference %s\n", opts.reference)
    outFile.printf("run\n")
    mk = false
  end
end
outFile.printf("exit\n")
outFile.close
system("lscope.sh -u #{opts.user} -w #{opts.password} < project.pln")
sleep 0.1
File.unlink("project.pln")
