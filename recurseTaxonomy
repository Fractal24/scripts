#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'mysql'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "tax num(s)", :type=>:strings, :required=>true
  opt :file, "input is file, not tax nums themselves"
  opt :taxonomy, "use taxonomy text file from phylodb not db", :type=>:string
  opt :host, "phylodb database host", :type=>:string, :default=>"mysql-lan-pro"
  opt :nodes, "use NCBI nodes.dmp", :type=>:string
  opt :names, "use NCBI names.dmp (with nodes.dmp)", :type=>:string
  opt :minlen, "only report taxonomies with fewer than n nodes", :type=>:integer
  opt :maxlen, "only report taxonomies with more than n nodes", :type=>:integer
  opt :verbose, "verbose messaging"
end

if (!opts.taxonomy && !opts.nodes)
  db = Mysql.new(opts.host, "access", "access", "phylodb")
elsif (opts.taxonomy)
  tax = Hash.new
  File.new(opts.taxonomy).each do |line|
    current, name, parent, rank = line.chomp.split("\t")
    tax[current.to_i] = [name, parent.to_i, rank]
  end
  db = tax
elsif (opts.nodes)
  tax = Hash.new
  names = Hash.new
  File.new(opts.names).each do |line|
    num, name = line.chomp.split("\t|\t")
    names[num.to_i] = name if !names[num.to_i]
  end
  File.new(opts.nodes).each do |line|
    current, parent, rank = line.chomp.split("\t|\t")
    tax[current.to_i] = [names[current.to_i], parent.to_i, rank]
  end
  db = tax
end

def recurseTaxonomy(db, current, verbose, count = 0)
  if db.class == Hash # not using db
    name, parent, rank = db[current]
  else
    name, parent, rank = db.query("SELECT name, parent_id FROM taxonomy WHERE taxon_id=#{current}").fetch_row
  end
  if (current == 1 || name.nil? || name == "Bacteria" || name == "Eukaryota" || name == "Viruses" || name == "Archaea" || count > 20)
    [name]
  else
    print [current, name, parent, rank, 1].join("\t") + "\n" if verbose
    recurseTaxonomy(db, parent, verbose, count + 1).to_a + [name]
  end
end


if (opts.file)
  ids = []
  File.new(opts.input.first).each do |line|
    ids.push(line.chomp.to_i)
  end
else
  ids = opts.input
end

ids.each do |id|
  tax = recurseTaxonomy(db, id.to_i, opts.verbose)
  print [id,tax.join(";")].join("\t") + "\n"
end
