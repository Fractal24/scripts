#!/usr/bin/env ruby 

require 'trollop'
require 'statistics2'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "aligned fasta protein file", :required=>true, :type=>:string
  opt :dna, "unaligned DNA fasta file", :required=>true, :type=>:string
  opt :tree, "tree of sequences in alignment", :required=>true, :type=>:string
end

name = File.basename(opts.input, ".afa")
phy = name + "_codeml.phy"
selectionctl = name + "_selection.ctl"
nullctl = name + "_null.ctl"
selectionmlc = name + "_selection.mlc"
nullmlc = name + "_null.mlc"
ctl = DATA.read
ctl.sub!("PHYLIP", phy)
ctl.sub!("TREE", opts.tree)
if !File.exists?(phy)
	if !system("backAlign -i #{opts.input} -d #{opts.dna} -p > #{phy}")
		STDERR << "Problem performing back alignment\n"
		exit(1)
	end
else
	STDERR << "Skipping back alignment as #{phy} already exists...\n"
end

out = File.new(selectionctl, "w")
out.print ctl.sub("MLCOUTPUT", selectionmlc)
out.close

out = File.new(nullctl, "w")
out.print ctl.sub("fix_omega = 0", "fix_omega = 1").sub("MLCOUTPUT", nullmlc)
out.close

if !File.exists?(nullmlc)
	STDERR << "Running codeml on #{name} with null model...\n"
	system("codeml #{nullctl}")
else
	STDERR << "Skipping codeml on #{name} with null model as output exists...\n"
end

if !File.exists?(selectionmlc)
	STDERR << "Running codeml on #{name} with branch & sites model...\n"
	system("codeml #{selectionctl}")
else
	STDERR << "Skipping codeml on #{name} with branch & sites model as output exists...\n"
end



lnL0 = File.read(nullmlc).split("\n").grep(/lnL/).first.split("):")[1].to_f
lnL1 = File.read(selectionmlc).split("\n").grep(/lnL/).first.split("):")[1].to_f
np0 = File.read(nullmlc).split("\n").grep(/lnL/).first.split("np:")[1].to_i
np1 = File.read(selectionmlc).split("\n").grep(/lnL/).first.split("np:")[1].to_i

deltaLRT = 2*(lnL1-lnL0)
printf("deltaLRT between selection and null is: %8.3f\n", deltaLRT)
pvalue = Statistics2::chi2_x(np1 - np0, deltaLRT)
if pvalue < 0.05
	STDERR << "This is a significant difference!\n"
	printIt = false
	File.new(selectionmlc).each do |line|
		printIt = true if line =~/^Bayes Empirical Bayes/
		printIt = false if line.length < 3
		print line if printIt
	end
else
	STDERR << "This is a insignificant difference."
end

   
__END__
seqfile  = PHYLIP 	         * sequence data file name
treefile = TREE 	 * tree structure file name
outfile  = MLCOUTPUT 	 * main result file name

  noisy = 0     * 0,1,2,3,9: how much rubbish on the screen
verbose = 0     * 1: detailed output, 0: concise output
runmode = 0     * 0: user tree;  1: semi-automatic;  2: automatic
                * 3: StepwiseAddition; (4,5):PerturbationNNI; -2: pairwise

  seqtype = 1   * 1:codons; 2:AAs; 3:codons-->AAs
CodonFreq = 2   * 0:1/61 each, 1:F1X4, 2:F3X4, 3:codon table
    clock = 0   * 0: no clock, unrooted tree, 1: clock, rooted tree
   aaDist = 0   * 0:equal, +:geometric; -:linear, {1-5:G1974,Miyata,c,p,v}
    model = 2   * models for codons:
                * 0:one, 1:b, 2:2 or more dN/dS ratios for branches
  NSsites = 2   * 0:one w; 1:NearlyNeutral; 2:PositiveSelection; 3:discrete;
                * 4:freqs; 5:gamma;6:2gamma;7:beta;8:beta&w;9:beta&gamma;10:3normal
    icode = 0   * 0:standard genetic code; 1:mammalian mt; 2-10:see below
    Mgene = 0   * 0:rates, 1:separate; 2:pi, 3:kappa, 4:all

fix_kappa = 0   * 1: kappa fixed, 0: kappa to be estimated
    kappa = 2   * initial or fixed kappa
fix_omega = 0   * 1: omega or omega_1 fixed, 0: estimate
    omega = 1   * initial or fixed omega, for codons or codon-based AAs

       getSE = 0       * 0: don't want them, 1: want S.E.s of estimates
RateAncestor = 0       * (0,1,2): rates (alpha>0) or ancestral states (1 or 2)
  Small_Diff = .45e-6  * Default value.
   cleandata = 1       * remove sites with ambiguity data (1:yes, 0:no)?
 fix_blength = 0       * 0: ignore, -1: random, 1: initial, 2: fixed 
