#!/usr/bin/env ruby

$VERBOSE=nil

require 'ostruct'
require 'optparse'
opt = OpenStruct.new

opt.project = nil
ARGV.options {|opts|
  opts.banner << " cutoff-tab hmm-dir seq.pep"
  opts.on("-p ", "--project ", Integer, 
          "JCVI project (for grid)") {|t| opt.project = t}    
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size != 3)
    STDERR.printf("nope nope nope\n")
    STDERR.puts opts
    exit(1)
  end
}

cut, db, pep = ARGV

cutoff=Hash.new
names=Hash.new
File.new(cut).each do |line|
  name,hmm,value=line.chomp.split(" ")
  cutoff[hmm]=value.to_f
  names[hmm]=name
end

cutoff.keys.each do |hmm|
  cmd = "hmmsearch -T #{cutoff[hmm]} --tblout #{names[hmm]}.tbl #{db}/#{hmm}.HMM #{pep}"
  if (opt.project.nil?)
    STDERR.printf("Processing #{names[hmm]}...\n")
    system("#{cmd} > /dev/null")
  else
    system("runCmd -c \"#{cmd}\" --nowait --project #{opt.project}")
  end
end

out = File.new(pep + "_summary.csv", "w")

hits = 0

cutoff.keys.each do |hmm|
  next if !File.exist?(names[hmm] + ".tbl")
  count = 0
  File.new(names[hmm] + ".tbl").each do |line|
    count += 1 if line !~/^#/
  end
  out.printf("%s,%d\n", names[hmm], count)
  hits += 1 if count > 0
end

out.close
STDERR.printf("%d of %d hmms hit\n", hits, cutoff.keys.size)
