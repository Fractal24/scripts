#!/usr/bin/env ruby 

require 'rubygems'
require 'bio'    
require 'optimist'
require 'ZFile'
require 'Btab'

ARGV.push("--help") if ARGV.empty?
opts = Optimist::options do
  banner File.basename($0)
  opt :input, "two blast files to compare", :required=>true, :type=>:strings
  opt :evalue, "evalue cutoff", :default=>0.1, :type=>:float
end

def processBlast(blast, names, hitName, hitVal, hitIdent, evalue)
  names[blast] = []
  Bio::Blast::Default::Report.open(blast, "r").each do |query|
    qname = query.query_def.split(" ").first
    names[blast].push(qname)
    query.each do |hit|
      hname =  hit.definition.split(" ").first
      evalue = hit.evalue
      coverage = hit.overlap / (0.01 * query.query_len)
      identity = hit.identity / (0.01 * hit.overlap)
      if hit.evalue > evalue
        hitName[qname] = "xxx"
        hitVal[qname] = "xxx"
      else
        hitName[qname] = hname
        hitVal[qname] = hit.evalue
        hitIdent[qname] = identity
      end
      break
    end
  end
end

def processBtab(blast, names, hitName, hitVal, hitIdent, evalue)
  names[blast] = []
  Btab.new(blast).each do |query|
    names[blast].push(query.name)
    match = query.matches.first
    if match.name == "" || match.evalue > evalue
      hitName[query.name] = "xxx"
      hitVal[query.name] = "xxx"
    else
      hitName[query.name] = match.name
      hitVal[query.name] = match.evalue
      hitIdent[queru.name] = match.identity
    end
  end
end

def processM8(blast, names, hitName, hitVal, hitIdent, evalue)
  names[blast] = []
  oldQuery = nil
  File.new(blast).each do |line|
    query, subject, percentid, alen, mismatch, gaps, qstart, qend, sstart,
    send, ev, score = line.chomp.split("\t")
    ev = ev.to_f
    if query != oldQuery 
      names[blast].push(query)
      if ev > evalue
        hitName[query] = "xxx"
        hitVal[query] = "xxx"
      else
        hitName[query] = subject
        hitVal[query] = ev
        hitIdent[query] = percentid
      end
      oldQuery=query
    end
  end
end

blast1, blast2 = opts.input

hitName = Hash.new
hitVal = Hash.new
hitIdent = Hash.new
names = Hash.new

if blast1 =~/btab/
  processBtab(blast1, names, hitName, hitVal, hitIdent, opts.evalue)
  processBtab(blast2, names, hitName, hitVal, hitIdent, opts.evalue)
elsif blast1 =~/m8/
  processM8(blast1, names, hitName, hitVal, hitIdent, opts.evalue)
  processM8(blast2, names, hitName, hitVal, hitIdent, opts.evalue)
else
  processBlast(blast1, names, hitName, hitVal, hitIdent, opts.evalue)
  processBlast(blast2, names, hitName, hitVal, hitIdent, opts.evalue)
end

names[blast1].sort.each do |name|
  if (hitName[hitName[name]] == name)
    bestR = "yes"
  else
    bestR = "no"
  end
  printf("%s\t%s\t%s\t%s\t%s\t%s\n", name, hitName[name], hitVal[name],
	 hitVal[hitName[name]], bestR, hitIdent[hitName[name]])  
end

