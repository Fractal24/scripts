#!/usr/bin/env ruby 

require 'trollop'
require 'fileutils'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "input url file", :required=>true, :type=>:string
  opt :gtdownload, "gtdownload binary", :default=>"/data/badgerjh/Human/cghub/bin/gtdownload"
  opt :keyfile, "download key", :default=>"/data/badgerjh/Human/cghub.key"
  opt :phix, "phix reference", :default=>"/data/badgerjh/Human/phix"
  opt :kraken, "kraken reference", :default=>"/data/badgerjh/minikraken_20141208"
end

Dir.mkdir("unmapped") if !Dir.exists?("unmapped")

File.new(opts.input).each do |line|
  cmd = opts.gtdownload + " -c " + opts.keyfile + " " + line
  fid = cmd.split("/").last.chomp
  krak="unmapped/"+fid+".kraken"
  if !File.exists?(krak)
    STDERR << "Downloading #{fid}...\n"
    system(cmd) if !Dir.exists?(fid)
    out = fid+".fastq"
    bam = Dir.glob(fid+"/*.bam").first
    STDERR << "Extracting unmapped reads from #{fid}...\n"
    cmd = "samtools view -b -f 4 #{bam} | samtools bam2fq - > #{out}"
    system("srun --mem=8g #{cmd}") if !File.exists?(out)
    cmd = "bowtie2 -x #{opts.phix} #{out} > #{out}.sam"
    STDERR << "Mapping #{fid} to phiX...\n"
    system("srun --mem=8g #{cmd}") if !File.exists?(out+".sam")
    out2 = "unmapped/#{fid}_unmapped.fastq"
    STDERR << "Making final fastq file for #{fid}...\n"
    cmd = "samtools view -b -f 4 #{out}.sam | samtools bam2fq - > #{out2}"
    system("srun --mem=8g #{cmd}") if !File.exists?(out2)
    cmd = "kraken -d #{opts.kraken} #{out2} | egrep '^C' > #{krak}"
    STDERR << "Running kraken for #{fid}...\n"
    system("srun --mem=8g #{cmd}") if !File.exists?(krak)
    bz2 = out2+".bz2"
    cmd = "bzip2 #{out2}"
    system(cmd) if !File.exists?(bz2)
    FileUtils.rm_rf(fid) if Dir.exists?(fid)
    FileUtils.rm(fid+".gto") if File.exists?(fid+".gto")
    FileUtils.rm(out) if File.exists?(out)
    FileUtils.rm(out+".sam") if File.exists?(out+".sam")
  end
end
