#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'Phylogeny'
opt = OpenStruct.new

$VERBOSE = nil
opt.project = nil
opt.local = false
opt.number = 1

ARGV.options {|opts|
  opts.banner << " dna-alignment [dna-alignment...]"
  opts.on("-l", "--local", "run locally (#{opt.local})") {|t| opt.local = t}
  opts.on("-n ", "--number ", Integer, 
	  "Number of jobs to run per node (for grid)") {|t| opt.number = t} 
  opts.on("-p ", "--project ", String, 
	  "JCVI Project Number (for grid)") {|t| opt.project = t} 
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 1)
    STDERR.puts opts
    exit(1)
  end
}

if (!opt.local && opt.project.nil?)
  STDERR.printf("A JCVI project number is required for running on the grid\n")
  exit(1)
end


grid = nil
ARGV.each {|glob|
  files = Dir.glob(glob)
  files = [glob] if (files.empty?)
  ali = Hash.new
  gridBatch = "batch00001"
  if (!opt.local)
    grid = File.new(gridBatch, "w")
  end
  count = 0
  files.each {|file|
    count += 1
    name = file[0..file.index(File.extname(file)) - 1]
    if (File.dirname(file) =~/\./)
      name = Dir.pwd + "/" + name
    end
    out = name + ".alias"
    tree = name + ".tre"
    rst = name + ".hyphy"
    ali[file] = aliasFasta(file, nil, out)
    next if (ali[file].keys.size < 4)
    makeQuickNJTree(tree, out)
    entry = '10\n5\n1\n'+out+'\n'+tree+'\n2\n8\nd\n1\n1\n0.9\n10\n' +
      rst +'\n'
    hyphy="/home/jbadger/EVOL/HYPHY_Source/HYPHYMP BASEPATH=/home/jbadger/EVOL/HYPHY_Source"
    cmd = "echo -e '#{entry}' | #{hyphy}"
    if (opt.local)
      system(cmd)
    else
      grid.printf("%s\n", cmd)
      if (count >= opt.number)
	grid.close
	count = 0
	gridBatch.succ!
	grid = File.new(gridBatch, "w")
      end
    end
  }
}
if (!opt.local)
  grid.close
  
end
