#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'rubygems'
require'bio'
include Bio
opt = OpenStruct.new

ARGV.options {|opts|
  opts.banner << " categories fasta [fasta...]"
  #opts.on(nil, "--report", "run apisReport when done") {|t| opt.report = t}    
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 2)
    STDERR.puts opts
    exit(1)
  end
}

cat = ARGV.shift

cats = Hash.new

STDERR.printf("Loading categories....\n")
File.new(cat).each {|line|
  name, category = line.chomp.split("\t")
  category = category.split(";").first
  cats[name] = category
}


count = Hash.new
total = Hash.new
ARGV.each {|fasta|
  name = File.basename(fasta, ".pep") 
  count[name] = Hash.new
  cats.values.each {|category|
    count[name][category] = 0
  }
  total[name] = 0
  FlatFile.new(FastaFormat, File.new(fasta)).each {|seq|
    if (!cats[seq.entry_id].nil?)
      count[name][cats[seq.entry_id]] += 1
      total[name] += 1
    end
  }
}

print "Category\t"
count.keys.sort.each {|set|
  print set
  print "\t" if (set != count.keys.sort.last)
}
print "\n"
cats.values.sort.uniq.each {|category|
  printf("%s", category)
  count.keys.sort.each {|set|
    printf("\t%d", count[set][category]/(0.01*total[set]))
  }
  print "\n"
}
