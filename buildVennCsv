#!/usr/bin/env ruby

$VERBOSE = nil

require 'rubygems'
require 'bio'
require 'trollop'

def merge(clusters, pvalue, genome)
  clusters.each do |c1|
    clusters.each do |c2|
      if (c1 - c2 != c1) #overlap
        ctmp = (c1 + c2).uniq
        seen = Hash.new
        bad = false
        ctmp.each do |pep|
          if (seen[genome[pep]])
            bad = true
          else
            seen[genome[pep]] = true
          end
          if (!bad)
            c1 = ctmp.dup
            clusters.delete(c2)
          end
        end
      end
    end
  end
end

def averageScore(scoreHash)
  tot = 0
  scoreHash.values.each do |value|
    tot += value
  end
  return tot / scoreHash.keys.size
end

def processmcl(out, score, plen, genomes, reps, globalSeen)
  bad = []
  $VERBOSE = nil
  STDERR.printf("Building Multi Clusters...\n")
  `mcl #{out} --abc -o - 2>/dev/null`.split("\n").each do |line|
    fields = line.chomp.split("\t")
    seen = Hash.new
    
    fields.each do |field|
      if (field.class == Array || field.nil?)
        fields.delete(field)
        next
      end
      pep, genome = field.split("_%_")
      if (seen[genome])
        if (averageScore(score[seen[genome]]) > averageScore(score[field]))
          bad.push(field)
        else
          bad.push(seen[genome])
          seen[genome] = field
        end
      else
        seen[genome] = field
      end
    end
    fields = seen.values.sort {|x, y| plen[y]<=>plen[x]}
    fields.each do |field|
      fields.delete(field) if (globalSeen[field]) 
    end
    if (!fields.empty?)
      longest = fields.first
      reps[longest.split("_%_").first] = true
      printf("%s", longest.split("_%_").first)
      genomes.each do |genome|
        if (seen[genome] && !globalSeen[seen[genome]])
          printf(",%s", seen[genome].split("_%_").first)
          globalSeen[seen[genome]] = true
        else
          printf(",")
        end
      end 
      printf("\n")
    end
  end
  return bad
end

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :peptides, "Input fasta files", :required=>true, :type=>:strings
  opt :evalue, "evalue cutoff", :default=>0.1, :type=>:float
end

plen = Hash.new
score = Hash.new

outName =opts.peptides.first + ".mcl"
out = File.new(outName, "w")

STDERR.printf("Loading Genomes...\n")
opts.peptides.each do |pep|
  Bio::FlatFile.new(Bio::FastaFormat, File.new(pep)).each do |seq|
    key = seq.definition.split(" ").first + "_%_" + pep
    score[key] = Hash.new
    score[key][key] = 10
    plen[key] = seq.length
    out.printf("%s\t%s\t%8.3f\n",key,key,score[key][key])
  end
end

STDERR.printf("Loading Pairwise Clusters...\n")
opts.peptides.each do |pep1|
  opts.peptides.each do |pep2|
    next if pep1 == pep2
    vs = pep1 + "_vs_" + pep2
    rvs = pep2 + "_vs_" + pep1
    if (!File.exists?(vs + ".recip"))
      b1 = Dir.glob("#{vs}.blastp.*").first
      b2 = Dir.glob("#{rvs}.blastp.*").first
      if File.exists?(b1) && File.exists?(b2)
        system("bestRecip -i #{b1} #{b2} -e #{opts.evalue} > #{vs}.recip")
      else
        STDERR.printf("Can't find any blast for #{vs}!\n")
        exit(1)
      end
    end

    File.new(vs + ".recip").each do |line|
      x, y, p1, p2, orth = line.chomp.split("\t")
      x = x + "_%_" + pep1
      y = y + "_%_" + pep2
      if (orth == "yes")
        score[x][y] = -Math.log(p1.to_f + 1e-300)
        score[x][y] = 200 if score[x][y] > 200
        score[y][x] = -Math.log(p2.to_f + 1e-300)
        score[y][x] = 200 if score[y][x] > 200
        out.printf("%s\t%s\t%8.3f\n",x,y,score[x][y])
      end
    end
  end
end
out.close

printf("Representative")
opts.peptides.each do |g|
  printf(",%s", File.basename(g, ".pep"))
end
printf("\n")

reps = Hash.new

globalSeen = Hash.new

bad = processmcl(outName, score, plen, opts.peptides, reps, globalSeen)
outName = opts.peptides.first.to_s + ".mcl"
out = File.new(outName, "w")
bad.each do |x|
  out.printf("%s\t%s\t%8.3f\n",x,x,score[x][x])
  score[x].keys.each do |y|
    out.printf("%s\t%s\t%8.3f\n",x,y,score[x][y]) if (bad.include?(y))
  end
end
out.close
processmcl(outName, score, plen, opts.peptides, reps, globalSeen)
File.unlink(outName)

STDERR.printf("Writing Pangenome.fa...\n")
out = File.new("Pangenome.fa", "w")
opts.peptides.each do |pep|
  Bio::FlatFile.new(Bio::FastaFormat, File.new(pep)).each do |seq|
    out.print seq if reps[seq.entry_id]
  end
end
out.close
