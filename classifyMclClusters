#!/usr/bin/env ruby 

require 'trollop'
require 'Stats'
require 'ZFile'
require 'csv'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "mcl clusters output file", :required=>true, :type=>:string
  opt :groups, "groups file", :type=>:string, :required=>true
  opt :miss_species, "maximum number of missed species", :default=>0
  opt :exclude, "file of cluster abbreviations to exclude",:type=>:string
end


exclude = Hash.new
if opts.exclude
  File.new(opts.exclude).each do |line|
    abbr = line.chomp.split("\t").last
    exclude[abbr] = true
  end
end

groups = Hash.new
File.new(opts.groups).each do |line|
  name, species = line.chomp.split("\t", 2)
  groups[name] = Hash.new
  species.split("\t").each do |sp|
    groups[name][sp] = true if !exclude[sp]
  end
end

def checkCluster(cluster, groups)
  seen = Hash.new
  cluster.split("\t").each do |pep|
    sp = pep.split("|").first
    seen[sp] = [] if !seen[sp]
    seen[sp].push(pep)
  end
  found = Hash.new
  missing = Hash.new
  groups.keys.each do |group|
    found[group] = Hash.new
    missing[group] = []
    groups[group].keys.each do |sp|
      if seen[sp]
        found[group][sp] = [] if !found[group][sp]
        found[group][sp] += seen[sp]
      else
        missing[group].push(sp)
      end
    end
  end
  [found, missing]
end

print (["Representative"] + groups.keys).to_csv
ZFile.new(opts.input).each do |line|
  found, missing = checkCluster(line, groups)
  row = [line.split(" ").first]
  groups.keys.each do |group|
    if missing[group].size <= opts.miss_species
      row.push(1)
    else
      row.push(nil)
    end
  end
  print row.to_csv
end
