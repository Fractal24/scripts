#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'Newick'
require 'csv'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :exclude, "exclude from target", :type=>:strings, :default=>[""]
  opt :ingroup , "ingroup taxa", :type=>:strings, :default=>[""]
  opt :only, "target clade only has target"
  opt :target, "target taxon", :type=>:strings, :required=>true
  opt :spreadsheet, "spreadsheet to read in", :required=>true, :type=>:string
  opt :taxonomy, "APIS usedTaxa file", :required => true, :type => :string
  opt :verbose, "be verbose"
end

# load taxonomy and return species-based hash
def loadTaxonomy(taxf, verbose)
   # recusively walk up tax tree
   def recurseTaxonomy(tax, current)
      name, parent, rank = tax[current]
      if (name.nil? || name == "root" || name == "cellular organisms")
         []
      else
         recurseTaxonomy(tax, parent).to_a + [name]
      end
   end
   STDERR << "Loading taxonomy...\n" if verbose
   tax = Hash.new
   sp = Hash.new
   tax_ids = Hash.new
   taxf.each do |tf|
      ZFile.new(tf).each do |line|
         current, name, parent, rank = line.chomp.split("\t")
         name = name.tr("(),:","")
         tax[current.to_i] = [name, parent.to_i, rank]
         sp[name] = current.to_i if rank == "species" || rank == "subspecies" || rank == "no rank" || rank == "metagenome"
         tax_ids[name] = current
      end
   end
   taxonomy = Hash.new
   sp.keys.each do |s|
      taxonomy[s.gsub(" ","_")] = recurseTaxonomy(tax, sp[s])
   end
   [taxonomy, tax_ids]
end

# summarize set of matching taxonomies
def summarizeTax(consense)
  num = consense.first.size
  match = []
  done = false
  num.times do |i|
    match[i] = ""
    consense.each do |tax|
      tax = tax.split("; ")
      if (match[i] == "")
        match[i] = tax[i]
      elsif (match[i] != tax[i])
        match[i] = ""
        done = true
        break
      end
    end
    break if done
  end
  match = match - [nil] - [""]
  match.join("; ")
end


# convert non-standard groups to standard
def convertTax(entry)
  fixed = []
  entry.each do |taxon|
    if taxon == "prokaryotes"
      fixed += ["Bacteria", "Archaea"] 
    elsif taxon == "stramenopiles" 
      fixed += ["Bacillariophyta", "Bicosoecida","Pelagophyceae",
        "Peronosporales","Phaeophyceae","Synurophyceae"]
    elsif taxon == "diatoms"
      fixed += ["Bacillariophyta"]
    else
      fixed += [taxon] if taxon != ""
    end
  end
  fixed
end

# return true if taxon matches any of the entries
def match(query,entries)
  entries.each do |taxon|
    return true if query =~/#{taxon}/
  end
  false
end

ctarget = convertTax(opts.target) 
cingroup = convertTax(opts.ingroup)
cexclude = convertTax(opts.exclude)

tax = loadTaxonomy(opts.taxonomy, opts.verbose)

treeCount = `wc -l #{opts.spreadsheet}`.split(" ").first.to_i

print ["Id", "Tree", "Target", "Bootstrap", "Annotation"].to_csv
count = 0
CSV.foreach(opts.spreadsheet, :headers=>true) do |row|
  seq_name, ann, tree = row["Seq Name"], row["Annotation"], row["Tree"]
  count += 1
  next if tree.nil?
  begin
    root =  NewickTree.new(tree).root
  rescue
    STDERR << "Cannot parse tree for #{seq_name}...\n"
    next
  end
  alltaxa = root.taxa.size
  query = root.findNode(seq_name)
  STDERR.printf("%4.2f%% done...\n", count*100.0/treeCount) if (count % 1000 == 0)
  if (!query.nil?)
    found = false
    boot = 100
    consense = []
    missed = false

    while !found && !query.nil? && query.taxa.size < alltaxa
      taxa = query.taxa   
      query.taxa.each do |taxon|
        tname = getTaxonomy(taxon, tax, true)
        next if taxon == seq_name || tname.nil? || match(tname, cingroup) || match(tname, cexclude)
        if match(tname, ctarget)
          consense.push(tname)
          found = true
          if (query.name.to_i > 0)
            boot = query.name.to_i
          end
        else
          STDERR.printf("%s removing %s because of only clause\n", seq_name, tname) if found && opts.verbose && opts.only
          missed = true
          break
        end
      end
      query = query.parent
    end
    found = false if found && missed && opts.only
    if found
      print [seq_name, root.to_s.chomp, summarizeTax(consense), boot, ann].to_csv
    else
      STDERR.printf("%s : target not found\n", seq_name) if opts.verbose
    end
  end
end
