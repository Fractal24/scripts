#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'bio'
require 'SunGrid'

ARGV.push("-h") if ARGV.empty?

opts = Trollop::options do
  banner File.basename($0)
  opt :blast, "NCBI Blast tab file(s) with seguids", :default=>"blastp", :type => :string
  opt :database, "BLAST database to use", :required => true, :type => :string
  opt :evalue, "BLAST evalue", :default => 1e-9, :type => :float
  opt :format, "BLAST output format (ncbi, m8, btab)", :default=>"ncbi"
  opt :input, "FASTA input file(s) to blast", :required => true, :type => :strings
  opt :maxhits, "max number of BLAST hits", :default => 50, :type => :integer
  opt :project, "JCVI project number", :required => true, :type => :string
  opt :sizejob, "number of sequences per grid job", :default => 1000
end

if (File.basename(opts.database) == opts.database)
  opts.database = Dir.pwd + "/" + opts.database
end

if (opts.blast !~ /^blast[n|p|x]/ && opts.blast !~/tblastn/ && opts.blast !~ /tblastx/)
  STDERR.printf("Only blastn, blastp, blastx, tblastn, and tblastx are valid grid BLAST programs\n")
  exit(1)
end

blast = "blastall -p #{opts.blast} -d #{opts.database} -b#{opts.maxhits}"
blast += " -m8 " if opts.format == "m8"
blast += " -v#{opts.maxhits} -e#{opts.evalue} -i "
blast = [blast, "badgerBtab"] if (opts.format == "btab")

opts.input.each do |file|
  if (!File.exists?(file))
    STDERR.printf("File %s does not exist!\n", file)
    next
  end
  grid = SunGrid.new(blast, opts.project, "4G")
  out = nil
  count = 0
  Bio::FlatFile.new(Bio::FastaFormat, File.new(file)).each do |seq|
    if (count % opts.sizejob == 0)
      out.close if (!out.nil?)
      out = File.new(grid.next, "w")
    end 
    out.print seq
    count += 1
  end
  out.close
  grid.submit(sync = true)
  grid.cleanup
  bout = File.basename(file) + "_vs_" + File.basename(db) + ".#{opts.blast}"
  bout += ".btab" if (opts.format == "btab")
  berr = File.basename(file) + "_vs_" + File.basename(db) + ".err"
  File.rename("blastall.out", bout)
  File.rename("blastall.err", berr)
end
