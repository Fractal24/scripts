#!/usr/bin/env ruby

require 'ostruct'
require 'rubygems'
require 'Phylogeny'
require 'optparse'
opt = OpenStruct.new

opt.dist = false
opt.ecnums = false
opt.file = nil
opt.noroot = false
opt.outgroup = nil
$VERBOSE = nil
opt.numboot = 100

ARGV.options {|opts|
  opts.banner << " prot.fasta [prot.fasta...]"
  opts.on("-d", "--dist", "output distance matrix") {|t| opt.dist = t}    
  opts.on("-e", "--ecnums", "label with EC numbers") {|t| opt.ecnums = t}    
  opts.on("-f", "--file", "write to files (default stdout)") {|t| opt.file = t}
  opts.on("-n ", "--numboot ", Integer, 
        "number of bootstrap reps  (default #{opt.numboot})") {|t| opt.numboot = t}
  opts.on("-r", "--noroot", "don't midpoint root trees") {|t| opt.noroot = t}    
  opts.on("-o ", "--outgroup ", String, "outgroup") {|t| opt.outgroup = t}    
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 1)
    STDERR.puts opts
    exit(1)
  end
}


ARGV.each {|prot|
  fasta2Stockholm(prot + ".stock", prot)
  if (!opt.dist)
    tree = NewickTree.new(`quicktree -boot #{opt.numboot} #{prot + '.stock'}`.tr("\n",""))
    if (!opt.noroot)
      if (opt.outgroup.nil?)
        tree = tree.midpointRoot
      else
        node = tree.findNode(opt.outgroup)
        if (node.nil?)
          STDERR.printf("node %s not in tree!\n", opt.outgroup)
          exit(1)
        else
          tree = tree.reroot(node)
        end
      end
    end
  else
    dist = `quicktree -out m #{prot + '.stock'}`
    print dist
  end
  tree.addECnums(prot) if (opt.ecnums)
  if (opt.file.nil?)
    print tree.to_s + "\n"
  else
    outFile = File.new(File.basename(prot).split(".").first + "_nj.tree", "w")
    outFile.print tree.to_s + "\n"
    outFile.close
  end
  File.unlink(prot + '.stock')
}
