#!/usr/bin/env ruby

require 'ostruct'
require 'rubygems'
require 'Phylogeny'
require 'optparse'
require 'fpdf'

opt = OpenStruct.new

opt.dist = false
opt.noroot = false
opt.outgroup = nil
opt.numboot = 100

ARGV.options do |opts|
  opts.banner << " prot.fasta [prot.fasta...]"
  opts.on("-d", "--dist", "output distance matrix") {|t| opt.dist = t}    
  opts.on("-n ", "--numboot ", Integer, 
        "number of bootstrap reps  (default #{opt.numboot})") {|t| opt.numboot = t}
  opts.on("-o ", "--outgroup ", String, "outgroup") {|t| opt.outgroup = t}
  opts.on("-u", "--unrooted", "leave tree unrooted") {opt.unrooted = true}    
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 1)
    STDERR.puts opts
    exit(1)
  end
end


ARGV.each do |prot|
  fasta2Stockholm(prot + ".stock", prot)
  if (!opt.dist)
    tree = NewickTree.new(`quicktree -boot #{opt.numboot} #{prot + '.stock'}`.tr("\n",""))
    if (!opt.unrooted)
      if (opt.outgroup.nil?)
        tree = tree.midpointRoot
      else
        node = tree.findNode(opt.outgroup)
        if (node.nil?)
          STDERR.printf("node %s not in tree!\n", opt.outgroup)
          exit(1)
        else
          tree = tree.reroot(node)
        end
      end
    end
  else
    dist = `quicktree -out m #{prot + '.stock'}`
    out = File.new(File.basename(prot).split(".").first + ".dist", "w")
    out.print dist
    out.close
  end
  filename = File.basename(prot).split(".").first + "_quicktree.tree"
  tree.write(filename)
  tree.draw(filename + ".pdf")
  File.unlink(prot + '.stock')
end
