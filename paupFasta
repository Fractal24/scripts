#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'bio'
require 'apis_lib'
require 'newick'
require 'fpdf'

origARGV = ARGV.dup # keep unparsed copy for grid

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "fasta alignment(s)", :required =>true, :type =>:strings
  opt :bootstrap, "number of bootstraps (or 0 to not bootstrap)", :default=>100, :type=>:integer
  opt :estimate, "estimate branch lengths with puzzle"
  opt :algorithm, "algorithm from choices: nj, pars, ml", :default=>"nj", :type =>:string
  opt :outgroup, "use specified taxon as outgroup", :type=>:string
  opt :unrooted, "leave tree unrooted"
  opt :project, "run on grid with project number specified", :type=>:string
end

if (opts.algorithm != "pars" && opts.algorithm != "nj" && opts.algorithm != "ml")
  STDERR.printf("only pars, ml, and nj are supported\n")
  exit(1)
end

if (opts.project)
  qsystem($0 + " " + origARGV.join(" ").gsub(/ -p [0-9]*/,""), opts.project)
  exit(0)
end

opts.input.each do |fasta|
  name = File.basename(fasta).split(".").first
  tmpdir = ENV["HOME"] + "/.tmp"
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tmpdir += "/" + name + "_" + Time.now.to_f.to_s
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tname = tmpdir + "/" + name
  dna = isDNA?(fasta)
  aliHash = aliasFasta(fasta, nil, tname, opts.trim)
  fasta2Nexus(tname, dna, tname + ".nex")
  out = File.new("#{tname}.nex", "a+")
  if (opts.outgroup)
    aliHash.keys.each do |key|
      out.print "Outgroup #{key};\n" if (aliHash[key] == opts.outgroup)
    end
  end
  if (opts.algorithm == "pars")
    out.print "Set Criterion=parsimony;\n"
    if (opts.bootstrap == 0)
      out.print "hsearch;\n"
    else
      out.print "boot nreps=#{opts.bootstrap} keepall=y;\n"
    end
  elsif (opts.algorithm == "ml")
    out.print "Set Criterion=likelihood;\n"
    if (opts.bootstrap == 0)
      out.print "hsearch;\n"
    else
      out.print "boot nreps=#{opts.bootstrap} keepall=y;\n"
    end
  elsif (opts.algorithm == "nj")
    out.print "Set Criterion=distance;\n"
    if (opts.bootstrap == 0)
      out.print "nj;\n"
    else
      out.print "boot nreps=#{opts.bootstrap} search=nj keepall=y;\n"
    end
  else
    out.print("hsearch;\n")
  end
  
  out.print "savetrees from=1 to=1 format=phylip file=#{tmpdir}/out.tree;\n"
  out.print "quit;\n"
  out.close
  system("paup #{tname}.nex")
  tree = NewickTree.fromFile("#{tmpdir}/out.tree")
  tree.fixPhylip
  tree = estimateMLBranchLengths(tree, tname, tmpdir) if (opts.estimate)
  tree.unAlias(aliHash)
  if (opts.outgroup)
    outNode = tree.findNode(opts.outgroup)
    if (outNode.nil?)
      STDERR.printf("taxon #{opts.outgroup} not found in tree!\n")
    else
      tree = tree.reroot(outNode)
    end 
  elsif (!opts.unrooted)
    tree = tree.midpointRoot
  end  
  tree.write("#{name}_#{opts.algorithm}.tree")
  tree.draw("#{name}_#{opts.algorithm}.tree.pdf")
  cleanup(tmpdir)
end
