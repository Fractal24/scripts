#!/usr/bin/env ruby

require 'bio'

if (ARGV.size != 2)
  STDERR.printf("Usage: %s tiling-file query.fna\n", File.basename($0))
  exit(1)
end

tiling, query = ARGV

scaffs = Hash.new
Bio::FlatFile.new(Bio::FastaFormat, File.new(query)).each do |seq|
  scaffs[seq.entry_id] = seq
end


order = File.new(File.basename(query).split(".").first+".order", "w")
tiled = ""
seen = []
File.new(tiling).each do |line|
  next if line =~/^>/
  rs, re, qs, qe, per1, per2, strand, scaff = line.chomp.split(" ")
  seen.push(scaff)
  if (strand == "+")
    tiled += scaffs[scaff].seq.tr("N","") + "N"*100
  else
    tiled += Bio::Sequence::NA.new(scaffs[scaff].seq).reverse_complement.seq.tr("N","") + "N"*100
  end
  order.printf("%s\t%s\n", scaff, strand)
end

miss = File.new(File.basename(query).split(".").first+"_missing.fa", "w")
missing = scaffs.keys - seen
missing.each do |scaff|
  miss.print scaffs[scaff]
end

pseudo = File.new(File.basename(query).split(".").first+"_pseudo.fa", "w")

pseudo.printf(">%s\n%s", File.basename(query).split(".").first, 
       tiled.upcase.gsub(Regexp.new(".{1,60}"), "\\0\n"))

pseudo.close
miss.close