#!/usr/bin/env ruby

require 'rubygems'
require 'bio'
require 'trollop'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "fasta file", :required=>true, :type=>:string
  opt :gff, "gff file", :type=>:string, :required=>true
  opt :upstream, "upstream length", :type=>:integer, :default=>1000
  opt :transcripts, "file with transcript ids to check", :type=>:string
  opt :linelength, "length of fasta lines", :type=>:integer, :default=>60
  opt :verse, "report regions *not* in transcripts file"
end

transcripts = Hash.new
if opts.transcript
  File.new(opts.transcripts).each do |line|
    transcripts[line.chomp] = true
  end
end

startEx = Hash.new
strandEx = Hash.new
contigEx = Hash.new
File.new(opts.gff).each do |line|
  contig, method, feature, start, stop, gc, strand, score, att = line.chomp.split("\t")
  if att =~/transcript_id \"([^"]*)\"/
    transcript = $1
  else
    transcript = nil
  end
  if feature =~ /exon/ && (transcripts[transcript] != opts.verse)
    strandEx[transcript] = strand
    contigEx[transcript] = contig
    if (strand == "+")
      if startEx[transcript].nil? || start.to_i < startEx[transcript]
        startEx[transcript] = start.to_i
      end
    else
      if startEx[transcript].nil? || stop.to_i > startEx[transcript]
        startEx[transcript] = stop.to_i
      end
    end
  end
end

Bio::FlatFile.new(Bio::FastaFormat, File.new(opts.input)).each do |seq|
  contigEx.keys.each do |key|
    if contigEx[key] == seq.entry_id
      if strandEx[key] == "+"
        upStart = startEx[key] - 1000
        upStop = startEx[key] - 1
      else
        upStart = startEx[key] + 1
        upStop = startEx[key] + 1000
      end
      if (upStart > 0 && upStop > 0)
        subseq = seq.naseq.subseq(upStart, upStop)
        subseq = subseq.complement if strandEx[key] == "-"
        print subseq.to_fasta(key + "_upstream ("+seq.entry_id+" "+upStart.to_s + " " + upStop.to_s+" "+ strandEx[key]+")", opts.linelength)
      end
    end
  end
end