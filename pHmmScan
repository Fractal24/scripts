#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'bio'
require 'SunGrid'

opt = OpenStruct.new
opt.command = "hmmscan"
opt.project = nil
opt.queue = "default"
opt.gridSize = nil
$VERBOSE = nil


ARGV.options do |opts|
  opts.banner << " hmm-db fasta [fasta...]"
  opts.on("-c ", "--command ", String,
         "command to run hmm search (#{opt.command})") {|t| opt.command = t}
  opts.on("-p", "--project ", String,  
          "JCVI project number") {|t| opt.project = t}
  opts.on("-q ", "--queue ", String, 
	  "grid queue to use (default #{opt.queue})") {|t| opt.queue = t}
  opts.on("-z ", "--size ", Integer,  
	  "number of sequences per each grid job (default automatic)") {|t| opt.gridSize = t} 
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 2)
    STDERR.puts opts
    exit(1)
  end
end

if (opt.project.nil?)
  STDERR.printf("A project is required\n")
  exit(1)
end

db = ARGV.shift
if (File.basename(db) == db)
  db = Dir.pwd + "/" + db
end


ARGV.each do |file|
  outName = File.basename(file, ".pep") + "_" + File.basename(db)
  next if File.exist?(outName + ".tbl")
  opt.gridSize = `grep -c ">" #{file}`.to_i / 1000 if (opt.gridSize.nil?)
  hout = File.basename(file) + "_vs_" + File.basename(db) + ".out"
  tblout = File.basename(file) + "_vs_" + File.basename(db) + ".tbl"
  domout = File.basename(file) + "_vs_" + File.basename(db) + ".dom"
  if (!File.exists?(file))
    STDERR.printf("File %s does not exist!\n", file)
    next
  end
  hmm = "#{opt.command} --cut_tc -Z 15930 -o hmmscan_input.$SGE_TASK_ID.out "
  hmm += "--tblout hmmscan_input.$SGE_TASK_ID.tbl "
  hmm += "--domtblout hmmscan_input.$SGE_TASK_ID.dom #{db} "
  grid = SunGrid.new(hmm, opt.project, "4G")
  count = 0
  out = nil
  Bio::FlatFile.new(Bio::FastaFormat, File.new(file)).each do |seq|
    if (count % opt.gridSize == 0)
      out.close if (!out.nil?)
      out = File.new(grid.next, "w")
    end 
    out.print seq
    count += 1
  end
  out.close
  grid.submit(sync = true)
  out = File.new(outName + ".tbl", "w")
  Dir.glob("*input*.tbl").each do |tbl|
    File.new(tbl).each do |line|
      out.print line
    end
  end
  out.close
  out = File.new(outName + ".dom", "w")
  Dir.glob("*input*.dom").each do |dom|
    File.new(dom).each do |line|
      out.print line
    end
  end
  out.close
  grid.cleanup
end
