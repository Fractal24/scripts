#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'rubygems'
require 'apis'

opt = OpenStruct.new
opt.host = "mysql-lan-pro"
opt.storage = "misc_apis"
o = OptionParser.new
o.banner << " group user password dataset [...dataset...]"
o.on("-h ", "--host ", String, 
"database host (default #{opt.host})") {|h| opt.host = h}
o.on("-s ", "--storage ", String, 
     "storage database (#{opt.storage})") {|s| opt.storage = s}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 4)
  STDERR << o
  exit(1)
end

group = ARGV.shift
user = ARGV.shift
password = ARGV.shift

tables = ["alignment", "annotation", "blast", "classification", "sequence",
            "tree"]

storage = MySQL.new(opt.host, opt.storage, "apis", "apis_user", opt.database)

ARGV.each {|dataset|
  STDERR.printf("Processing %s...\n", dataset)
  storage.query("SELECT owner, date_added, database_used, comments FROM dataset WHERE dataset = '"+dataset+"'").each {|row|
    owner, date_added, database_used, comments = row
    storage.insert("public_apis.dataset", 
                   [[dataset, owner, date_added, database_used, 
                     comments, group, user, password]])
  }
  tables.each {|table|
    STDERR.printf("Loading %s for %s...\n", table, dataset)
    records = []
    storage.query("SELECT * FROM "+table+" WHERE dataset = '"+dataset+"'").each {|row|
    records.push(row)
      if (records.size > 1000)
        storage.insert("public_apis."+ table, records)
        records = []
      end
    }
    storage.insert("public_apis."+ table, records) if (!records.empty?)
  }
}

