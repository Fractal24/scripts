#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'datamapper'
require 'csv'
require 'GOS'


opt = OpenStruct.new
opt.host = "mysql://access:access@mysql-lan-pro"
opt.missing = false
opt.where = ""
opt.mixed = false
opt.verbose = false

o = OptionParser.new
o.banner << " database"
o.on("-e ", "--expression ", String, "expression to select datasets") {|t| opt.where = "WHERE dataset LIKE '%" + t + "%'"}
o.on("-h ", "--host ", String, "database host (default #{opt.host})") {|t| opt.host = t}
o.on("-m", "--mixed", String, "include Bacteria; Mixed category (default #{opt.mixed})") {opt.mixed = true}
o.on("-v", "--verbose", String, "print additional debugging info (#{opt.verbose})") {opt.verbose = true}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 1)
  STDERR << o
  exit(1)
end

DataMapper.setup(:default, opt.host + "/" + ARGV.first)
db = repository(:default).adapter

datasets = db.select("SELECT DISTINCT dataset FROM classification #{opt.where}")

taxa = ["SAR11", "Other Alphaproteobacteria", "Prochlorococcus", "Gammaproteobacteria" , 
    "Bacteroidetes/Chlorobi" , "Rhodobacterales", "Actinobacteria" , "Firmicutes" , 
    "Other" , "Unknown Bacteria" ,"Deltaproteobacteria" , "Chlamydiae/Verrucomicrobia" , 
    "Betaproteobacteria" , "Epsilonproteobacteria" , "Spirochaetes" , 
    "Synechococcus" , "Thermotogae" ,"Planctomycetes" , "Other Cyanobacteria" , 
    "Other Proteobacteria"]
filterCount = {0.1 => 0, 0.22 => 0, 0.8 => 0, 3.0 => 0, "VIR" => 0}

taxonCount = Hash.new
taxa.collect {|x| taxonCount[x] = Hash.new;taxonCount[x][0.1]=0;taxonCount[x][0.22]=0;taxonCount[x][0.8]=0;
  taxonCount[x][3.0]=0;taxonCount[x]["VIR"]=0}

datasets.each do |dataset|
  STDERR.printf("Processing %s...\n", dataset)
  filter = classifySample(dataset)
  query = "SELECT count(*) as count, kingdom, phylum, class, ord, family, genus FROM classification "
  query += "WHERE dataset = '#{dataset}' AND kingdom = 'Bacteria' "
  query += "AND phylum != 'Mixed' " if (!opt.mixed)
  query += "GROUP BY kingdom, phylum, class, ord, family, genus"
  db.select(query).each do |row|
    if row.genus =~/Pelagibacter/
      taxon = "SAR11"
    elsif row.ord =~/Rhodobacterales/
      taxon = "Rhodobacterales"
    elsif row["class"] === "Alphaproteobacteria"
      taxon = "Rhodobacterales"
    elsif row["genus"] =~/Prochlorococcus/
      taxon = "Prochlorococcus"
    elsif row["class"] == "Gammaproteobacteria"
      taxon = "Gammaproteobacteria"
    elsif row.phylum =~/Bacteroidetes|Chlorobi/
      taxon = "Bacteroidetes/Chlorobi"
    elsif row.phylum == "Firmicutes"
        taxon = "Firmicutes"
    elsif row.phylum == "Actinobacteria"
      taxon = "Actinobacteria"
    elsif row.phylum == "Actinobacteria"
      taxon = "Actinobacteria"
    elsif row["class"] == "Betaproteobacteria"
      taxon = "Betaproteobacteria"
    elsif row["class"] == "Deltaproteobacteria"
      taxon = "Deltaproteobacteria"
    elsif row["class"] == "Epsilonproteobacteria"
      taxon = "Epsilonproteobacteria"
    elsif row.phylum == "Proteobacteria"
      taxon = "Other Proteobacteria"
    elsif row.phylum == "Spirochaetes"
      taxon = "Spirochaetes"
    elsif row.phylum == "Thermotogae"
      taxon = "Thermotogae"
    elsif row.phylum == "Planctomycetes"
      taxon = "Planctomycetes"
    elsif row.phylum =~/Chlamydiae|Verrucomicrobia/
      taxon = "Chlamydiae/Verrucomicrobia"
    elsif row.genus =~/Synechococcus/
      taxon = "Synechococcus"
    elsif row.phylum == "Cyanobacteria"
      taxon = "Other Cyanobacteria"
    elsif row.genus =~/Unknown|Undefined/
      taxon = "Unknown Bacteria"
    else
      taxon = "Other"
    end
    taxonCount[taxon][filter] += row.count
    filterCount[filter] += row.count
    if (opt.verbose)
      STDERR.printf("%20s\t%6d\t%s\n", taxon, row.count, [row.kingdom, row.phylum, row["class"], row.ord, row.family, row.genus].join("; "))
    end
  end
end

print ([nil] + taxa).to_csv
filterCount.keys.each do |filter|
  if filterCount[filter] > 0
    row = [filter]
    taxa.each do |taxon|
      row.push(sprintf("%3.1f%%", taxonCount[taxon][filter]*100.0/filterCount[filter]))
    end
    print row.to_csv
  end
end
