#!/usr/bin/env ruby 

require 'trollop'
require 'bio'
require 'ZFile'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :alias, "alias file", :required=>true, :type=>:string
  opt :input, "blast file", :required=>true, :type=>:string
  opt :fasta, "fasta file", :required=>true, :type=>:string
end

ali = Hash.new
File.new(opts.alias).each do |line|
  num, tax, abbr = line.chomp.split("\t")
  ali[num.to_i] = abbr
end

out = File.new(opts.fasta + ".ali", "w")
nnum = 0
nums = Hash.new
names = Hash.new
species = Hash.new
Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(opts.fasta)).each do |seq|
  name = seq.definition.split(" ").first
  num = seq.definition.split(" ")[-2].to_i
  if ali[num]
    seq.definition = ali[num] + "|" + name
    out.print seq
    nums[name] = nnum
    names[nnum] = name
    species[nnum] = ali[num]
    nnum += 1
  else
    STDERR << "Missing alias for " << seq.definition << "\n"
    exit(1)
  end
end
out.close

scores = Hash.new
ZFile.new(opts.input).each do |line|
  fields = line.chomp.split("\t")
  q = fields[0]
  s = fields[1]
  score = fields[11].to_f 
  qnum = nums[q]
  snum = nums[s]
  if qnum.nil?
    STDERR << "Missing qnum for " << q <<"\n"
    next
  end
  if snum.nil?
    STDERR << "Missing snum for " << s <<"\n"
    next
  end
  scores[qnum]=Hash.new if !scores[qnum]
  scores[qnum][snum] = score if !scores[qnum][snum] || score > scores[qnum][snum]
end

scores.keys.each do |i|
  saa = scores[i][i]
  scores.keys.each do |j|
    sbb = scores[j][j]
    if scores[i][j] && scores[j][i]
      ba = scores[i][j]/saa
      bb = scores[j][i]/sbb
      if ba > bb
        s = ba
      else
        s = bb
      end
      begin
        print [species[i]+"|"+names[i], species[j]+"|"+names[j], sprintf("%8.4f", s)].join("\t")+"\n"
      rescue
        STDERR << "i: " << i << "\n"
        STDERR << "names[i]: " << names[i] << "\n"
        STDERR << "species[i]: " << species[i] << "\n"
        STDERR << "j: " << j << "\n"
        STDERR << "names[j]: " << names[j] << "\n"
        STDERR << "species[j]: " << species[j] << "\n"
        exit(1)
      end
    end
  end
end
