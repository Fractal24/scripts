#!/usr/bin/env ruby 

require 'trollop'
require 'ZFile'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :alias, "alias file", :required=>true, :type=>:string
  opt :input, "blast M8 file", :required=>true, :type=>:string
  opt :fasta, "fasta file", :required=>true, :type=>:string
  opt :mcl, "run mcl after processing"
end

ali = Hash.new
File.new(opts.alias).each do |line|
  num, tax, abbr = line.chomp.split("\t")
  ali[num.to_i] = abbr
end

STDERR << "Processing Fasta...\n"
species = Hash.new

if !File.exists?(opts.fasta + ".ali")
  out = File.new(opts.fasta + ".ali", "w")
  ZFile.new(opts.fasta).each do |line|
    if line =~/^>([^\s]*)/
      name = $1
      species[name] = []
      num = line.split(" ")[-2].to_i
      if ali[num]
        defline = ali[num] + "|" + name
        out.print ">" + defline
        species[name].push(ali[num])
      else
        STDERR << "Missing alias for " << seq.definition << "\n"
        exit(1)
      end
    else
      out.print line
    end
  end
  out.close
end

scores = Hash.new
maxScore = Hash.new
STDERR << "Processing Blast...\n"
ZFile.new(opts.input).each do |line|
  fields = line.chomp.split("\t")
  q = fields[0]
  s = fields[1]
  score = fields[11] 
  if score
    score = score.to_f
    scores[q] = Hash.new if !scores[q]
    scores[q][s] = score if !scores[q][s] || score > scores[q][s]
    if !maxScore[q] || maxScore[q] < score
      maxScore[q] = score
    end
    if !seen[s]
      ratio = score/cscore
      out.printf("%s|%s\t%s|%s\t%8.4f\n", species[q], q, species[s], s, ratio)
      seen[s] = true
    end
  end
end
mcl = File.basename(opts.input).split(".m8").first + ".mcl"
out = File.new(mcl, "w") 
scores.keys.each do |q|
  species[q].each do |qsp|
    scores[q].keys.each do |s|
      species[s].each do |ssp|
        ratio = scores[q][s]/maxScore[q]
        out.printf("%s|%s\t%s|%s\t%8.4f\n", qsp, q, ssp, s, ratio)
      end
    end
  end
end
out.close

if opts.mcl
  STDERR << "Running clustering...\n"
  clusters = File.basename(mcl, ".mcl") + ".clusters"
  system("mcl #{mcl} --abc -o #{clusters}")
end
