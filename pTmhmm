#!/usr/bin/env ruby

require 'trollop'
require 'bio'
require 'Grid'

$VERBOSE=nil

ARGV.push("-h") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :command, "hmm search program", :default=>"tmhmm", :type => :string
  opt :input, "FASTA input file(s)", :required => true, :type => :strings
  opt :project, "JCVI project number if not local", :type => :string
  opt :sizejob, "number of sequences per grid job", 
      :type=>:integer, :default=>10000
  opt :queue, "grid queue to use", :type=>:string, :default => "medium" 
end

opts.input.each do |file|
  outName = File.basename(file, ".pep") + "_tmhmm.txt"
  next if File.exist?(outName) 
  if (!File.exists?(file))
    STDERR.printf("File %s does not exist!\n", file)
    next
  end
  hmm = "#{opts.command} tmhmm_input.$SGE_TASK_ID.out "
  grid = Grid.new(hmm, opts.project, "4G")
  count = 0
  out = nil
  Bio::FlatFile.new(Bio::FastaFormat, File.new(file)).each do |seq|
    if (count % opt.gridSize == 0)
      out.close if (!out.nil?)
      out = File.new(grid.next, "w")
    end 
    out.print seq
    count += 1
  end
  out.close
  grid.submit(sync = true)
  grid.cleanup
  outFile = File.new(outName, "w")
  out = "";
  File.new("tmhmm.out").each do |line|
    line.chomp!
    if (line !~ /\/usr\/local\/bin/ )
      if (line =~ /\#/ )
        if (line =~ /^\# ([^\s]+) Length: (\d+)\s*/ ) 
          if (out != "") 
            outFile.print out + "\n"
            out = ""
          end
          a = $1;
          outFile.printf("%s len=%s ", a, $2)
        elsif (line =~ /^\# ([^\s]+) Number of predicted TMHs:\s+(\d+)\s*/ )
          a = $1;
          outFile.printf("PredHel = %s ", $2)
        end
      else 
        out += "Topology=" if (out !~ /Topology/) 
        (a, b, property, topology) = line.split("\t")
        if (property == "inside") 
          out += "i"
        elsif (property ==  "outside") 
          out += "o"
        else 
          topology =~ /\s+(\d+)\s+(\d+)/
          out += $1 + "-" + $2
        end
      end
    end
  end
  outFile.close
  File.unlink("tmhmm.out")
end
