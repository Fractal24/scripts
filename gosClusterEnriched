#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'sqlite3'
require 'GOS'
require 'statistics2'
require 'csv'

opt = OpenStruct.new
o = OptionParser.new
opt.filters = 3

o.banner << " sqlite.db"
begin
  o.on("-f ", "--filters ", Integer, "minimum filters/site (#{opt.filters})") {|t| opt.filters = t}
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 1)
  STDERR << o
  exit(1)
end

dbname, rest = ARGV

db = SQLite3::Database.new(dbname)

class Float
  def sci_round(precision = 2)
	  return ("%.#{precision}e" % self).to_f
  end
end

def chi2Test(observed, expected)
  chi2 = 0
  observed.size.times do |i|
    chi2 += (observed[i] - expected[i])**2/expected[i].to_f
  end
  return [chi2.round(2), Statistics2.chi2_x(expected.size - 1,chi2).sci_round(2)]
end

def calculateExpected(observed, totals)
  expected = []
  obsum = observed.reduce(:+)
  totsum = totals.reduce(:+)
  observed.size.times do |i|
    expected[i] = ((obsum/totsum.to_f)*totals[i]).round
  end
  return expected
end

bins = Hash.new

STDERR << "Processing datasets...\n"
db.execute("SELECT dataset FROM dataset").each do |row|
  site, filter = siteName(row.first), classifySample(row.first)
  next if filter == "VIR" || site == "GS114"
  bins[site] = Hash.new if (!bins[site])
  bins[site][filter] = [] if !bins[site][filter]
  bins[site][filter].push(row.first)
end

libs = Hash.new

bins.reject! {|key, value| bins[key].keys.size < opt.filters}

bins.keys.each do |site|
  bins[site].keys.each do |filter|
    libs[filter] = [] if !libs[filter]
    libs[filter] += bins[site][filter]
  end
end


STDERR << "Computing cluster sizes...\n"
clusters = Hash.new
db.execute("SELECT cluster_num, count(*) FROM cluster GROUP BY cluster_num").each do |row|
  num, count = row
  clusters[num] = count
end


STDERR << "Counting cluster distribution...\n"
counts = Hash.new
totCounts = Hash.new
libs.keys.each do |filter|
  counts[filter] = Hash.new 
  libs[filter].each do |lib|
    db.execute("SELECT cluster_num, count(*) FROM sequence, cluster WHERE sequence.seq_name = cluster.seq_name AND dataset = '#{lib}' GROUP BY cluster_num").each do |row|
      num, count = row
      totCounts[filter] = 0 if (!totCounts[filter])
      counts[filter][num] = 0 if (!counts[filter][num])
      counts[filter][num] += count
      totCounts[filter] += count
    end
  end
end


cluster_ann = Hash.new
clusters.keys.each do |num|
  cluster_ann[num] = num.to_s + ":" + "no annotation"
end

db.execute("SELECT cluster_num, annotation FROM cluster_ann").each do |row|
  num, ann = row
  cluster_ann[num] = num.to_s + ":" + ann
end

print (["Cluster"] + ["Size in IO"] + counts.keys.sort.collect{|x| "Observed " + x.to_s} + counts.keys.sort.collect{|x| "Expected " + x.to_s} + 
  counts.keys.sort.collect{|x| "Normalized " + x.to_s} + ["Chi-square", "p-value"]).to_csv
totals = counts.keys.sort.collect{|x| totCounts[x]}

rows = Hash.new
chiv = Hash.new
sig = Hash.new

clusters.keys.sort.each do |num|
  row = [cluster_ann[num], clusters[num]]
  observed = counts.keys.sort.collect{|x| counts[x][num].to_i}
  next if (observed.empty? || observed.reduce(:+) < 10)
  expected = calculateExpected(observed, totals)
  normalized =  counts.keys.sort.collect{|x| counts[x][num].to_f / totCounts[x]}
  chi2 = chi2Test(observed, expected)
  row += observed + expected + normalized + chi2
  rows[num] = row
  chiv[num] = chi2.first
  sig[num] = chi2.last
end

bonferroni = 0.05 / rows.size
STDERR << "Rows: " << rows.size << " Bonferroni: " << bonferroni.sci_round << "\n"

chiv.keys.sort {|x, y| chiv[y] <=> chiv[x]}.each do |num|
  print rows[num].to_csv if sig[num] <= bonferroni
end