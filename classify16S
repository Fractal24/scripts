#!/usr/bin/env ruby

require 'trollop'
require 'bio'
require 'Newick'
require 'fpdf'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "input file", :required=>true, :type=>:string
  opt :db, "16S blast database", :required=>true, :type=>:string
  opt :percent, "percent blast identity", :default=>95.0
  opt :algorithm, "algorithm to use (ml or nj)", :default=>"ml"
  opt :max_target, "maximum number of target sequences", :default=>10
  opt :threads, "CPU threads to use", :default=>2
end

queries = []
Bio::FlatFile.new(Bio::FastaFormat, File.new(opts.input)).each do |seq|
  queries.push(seq)
end
STDERR << "Found #{queries.length} query sequences...\n"


name = File.basename(opts.input).split(".").first
blast = name + ".blast"
list = name + ".list"
tmp = name + ".tmp"
tmp2 = name + ".tmp2"
homologs = name + ".hom"
aln = name + ".afa"
tree = name + ".tre"
pdf = tree + ".pdf"

cmd = "blastn -db #{opts.db} -query=#{opts.input} "
cmd += "-perc_identity #{opts.percent} -outfmt 6 -num_threads #{opts.threads} "
cmd += "-max_target_seqs #{opts.max_target} > #{blast}"
if File.exists?(blast)
  STDERR << "Found #{blast} Skipping BLAST step...\n"
else
  STDERR << "Running blast...\n"
  system(cmd)
end

out = File.new(list, "w")
seen = Hash.new
File.new(blast).each do |line|
  id = line.chomp.split("\t")[1]
  out.print id+"\n" if !seen[id]
  seen[id] = true
end
out.close

cmd = "blastdbcmd -db #{opts.db} -entry_batch #{list} > #{tmp}"

if File.exists?(homologs)
  STDERR << "Found #{homologs} Skipping homolog step...\n"
else
  STDERR << "Extracting homologs...\n"
  system(cmd)
  out = File.new(homologs,"w")
  Bio::FlatFile.new(Bio::FastaFormat, File.new(tmp)).each do |seq|
    sname = seq.entry_id
    tax = seq.definition.split(" ",2).last.split(";")
    sp = tax.pop
    genus = tax.pop
    sp = sp.gsub(genus,"")
    sname += ("_"+genus+"_"+sp).tr(" :()","_").gsub("__","_")
    out.print Bio::Sequence.new(seq.seq).to_fasta(sname, 60)
  end
  out.close
end

out = File.new(tmp, "w")
queries.each do |seq|
  out.print seq
end
Bio::FlatFile.new(Bio::FastaFormat, File.new(homologs)).each do |seq|
  out.print seq
end
out.close

cmd = "muscle -in #{tmp} -out #{aln}"
if File.exists?(aln)
  STDERR << "Found #{aln} Skipping alignment step...\n"
else
  system(cmd)
end


def percent_identity(x,y)
  ident = 0
  0.upto(x.length - 1) do |i|
    a = x[i].upcase.tr("U","T")
    b = y[i].upcase.tr("U","T")
    ident += 1 if a==b || a=="-" || b == "-"
  end
  (10000*ident/x.length)/100.0
end

align = Hash.new
Bio::FlatFile.new(Bio::FastaFormat, File.new(aln)).each do |seq|
  align[seq.entry_id] = seq.seq
end


if File.exists?(tree)
  STDERR << "Found #{tree} Skipping phylogeny step...\n"
else
  out = File.new(tmp, "w")
  out << " #{align.keys.length} #{align.values.first.length}\n"
  align.keys.each do |key|
    out << key + " " + align[key].seq+"\n"
  end
  out.close
  STDERR << "Building Phylogeny...\n"
  if opts.algorithm == "ml"
    cmd = "phyml --quiet -i #{tmp} -m GTR -c 4 >/dev/null"
    system(cmd)
    File.rename(tmp+"_phyml_tree.txt", tree)
    File.unlink(tmp+"_phyml_stats.txt")
  else
    out = File.new(tmp2, "w")
    out << "# STOCKHOLM 1.0\n"
    align.keys.each do |key|
      out << key + " " + align[key] << "\n"
    end
    out.close
    cmd = "quicktree -boot 100 #{tmp2} > #{tree}"
    system(cmd)
  end
end

STDOUT << "\n\n"

ttree = NewickTree.fromFile(tree).midpointRoot
queries.each do |query|
  qname = query.definition.split(" ").first
  node = ttree.root.findNode(qname)
  taxa = node.parent.taxa
  STDOUT << "Neighbors of #{qname} are:"
  taxa.each do |hname|
    identity = percent_identity(align[qname],align[hname])
    STDOUT << " " + hname + " (#{identity})" if hname != qname
  end
  STDOUT << "\n"
end

ttree.draw(pdf) if !File.exists?(pdf)
  
File.unlink(list) if File.exists?(list)
File.unlink(tmp) if File.exists?(tmp)
File.unlink(tmp2) if File.exists?(tmp2)
File.unlink(homologs) if File.exists?(homologs)

STDOUT << "\n\nBlast is #{blast}\n"
STDOUT << "Alignment is #{aln}\n"
STDOUT << "Tree is #{tree}\n"
STDOUT << "PDF is #{pdf}\n"

