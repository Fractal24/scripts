#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'bio'

opt = OpenStruct.new
opt.err = 0
opt.size = 1080
opt.overlap = 80
opt.random = false

o = OptionParser.new
o.banner << " fasta"
o.on("-e ", "--err ", Float, "Simulated err rate (#{opt.err})") {|t| opt.err = t}
o.on("-o ", "--overlap ", Integer, "Overlap size (#{opt.overlap})") {|t| opt.overlap = t}
o.on("-r", "--randomize", "Randomize cassette order (#{opt.random})") {opt.random = true}
o.on("-s ", "--size ", Integer, "Cassette size (#{opt.size})") {|t| opt.size = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 1)
  STDERR << o
  exit(1)
end

def mutate(seq, err)
  seq.size.times do |i|
    if (rand <= err)
      seq[i] = ["a","g","t","c"].shuffle.first
    end
  end
  return seq
end

fasta = ARGV.shift

cassettes = []

Bio::FlatFile.new(Bio::FastaFormat, File.new(fasta)).each do |seq|
  n = 0
  while (n < seq.length)
    subSeq = seq.seq[n..n + opt.size - 1]
    if (subSeq.length < opt.size)
      subSeq += seq.seq[0, opt.overlap]
    end
    cassettes << mutate(subSeq, opt.err)
    n += opt.size - opt.overlap
  end
end

cassettes.shuffle! if opt.random

name = "cassette0001"
cassettes.each do |cassette|
  print Bio::Sequence::NA.new(cassette).to_fasta(name, 60)
  name.succ!
end
