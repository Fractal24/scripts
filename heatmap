#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'csv'
require 'ColorGradient'

opt = OpenStruct.new
o = OptionParser.new
o.banner << " csv-file [exp file]"
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 1 && ARGV.size != 2)
  STDERR << o
  exit(1)
end

csv, exp = ARGV

startColor = [255, 0, 0]
midColor = [255, 255, 0]
stopColor = [255, 255, 255]
width = 50
height = 25
csv = CSV.read(csv, :headers => true, :converters => :numeric)
tot_width = (csv.headers.size - 1)* width

grad = ColorGradient.new(startColor, midColor, stopColor)

printf("<svg width=\"#{2*csv.headers.size*width}px\" height = \"#{1.5*csv.size*height}px\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n")
printf("<defs>\n")
printf("<linearGradient id=\"grad1\" x1=\"0%%\" y1=\"0%%\" x2=\"100%%\" y2=\"0%%\">\n")
printf("<stop offset=\"0%%\" style=\"stop-color:rgb(#{startColor[0]},#{startColor[1]},#{startColor[2]});stop-opacity:1\"/>\n")
printf("<stop offset=\"50%%\" style=\"stop-color:rgb(#{midColor[0]},#{midColor[1]},#{midColor[2]});stop-opacity:1\"/>\n")
printf("<stop offset=\"100%%\" style=\"stop-color:rgb(#{stopColor[0]}, #{stopColor[1]}, #{stopColor[2]});stop-opacity:1\"/>\n")
printf("</linearGradient>\n")
printf("</defs>\n")
printf("<rect width=\"#{tot_width}\" height=\"25\" x=\"20\" y=\"50\" style=\"fill:url(#grad1);stroke-width:1;stroke:rgb(0,0,0)\"/>\n")

if (!exp.nil?)
  exp = CSV.read(exp, :headers => true, :converters => :numeric)
  values_exp = exp.by_col[1]
  max_exp = values_exp.max
  min_exp = values_exp.min
  dist_exp = max_exp - min_exp
  x = 20
  min_exp.step(max_exp, dist_exp / 10) do |i|
    printf("<text x=\"#{x}\" y=\"40\">#{i.round(1)}</text>\n")
    x += ((csv.headers.size - 1)* width) / 10
  end
else
  exp = nil
  values_exp = nil
  max_exp = nil
  min_exp = nil
  dist_exp = nil
end

x = 0
y = 100
maxX = 0
old_exp_x = nil
old_exp_y = nil

csv.by_row.each do |row|
  name = row.first.last
  x = 20
  row.each do |field|
    next if field.last == name
    color = grad.getColor(field.last/row.fields[1..row.size].max)
    printf("<rect width=\"#{width}\" height=\"#{height}\" x = \"#{x}\" y = \"#{y}\"")
    printf(" style=\"fill:rgb(#{color[0]},#{color[1]},#{color[2]});stroke-width:1;stroke:rgb(0,0,0)\"/>\n")
    x += width
  end
  x += width/2
  printf("<text x=\"#{x}\" y=\"#{y+0.6*height}\">#{name}</text>\n")
  if (exp)
    val = values_exp.shift
    exp_x = 20 + (((val - min_exp)/dist_exp)*tot_width)
    exp_y = y + (height/2)
    if (old_exp_x)
      printf("<line x1=\"#{old_exp_x}\" y1=\"#{old_exp_y}\"")
      printf(" x2=\"#{exp_x}\" y2=\"#{exp_y}\"")
      printf(" style=\"stroke:rgb(0,0,0);stroke-width:3\"/>\n")
    end
    old_exp_x = exp_x
    old_exp_y = exp_y
  end
  y += height
end
x = 40
y += height/2
csv.headers.each do |header|
  next if header.nil?
  printf("<text x=\"#{x}\" y=\"#{y}\" transform=\"rotate(90, #{x}, #{y})\">#{header}</text>\n")
  x += width
end
printf("</svg>")
