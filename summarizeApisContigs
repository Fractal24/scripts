#!/usr/bin/env ruby

require 'rubygems'
require 'ostruct'
require 'trollop'
require 'yajl'
require 'ZFile'
require 'csv'

if Object.const_defined?("Yajl") # Has Yajl been loaded?
   # add JSON encoding to every object
   class Object
      def to_json_pp
         Yajl::Encoder.encode(self,:pretty => true) + "\n"
      end
   end
   class JsonStreamer
      def initialize(filehandle)
         @filehandle = filehandle
      end
      def each
         parser = Yajl::Parser.new
         parser.on_parse_complete = proc{|obj| yield obj}
         @filehandle.each do |line|
            parser << line
         end
      end
   end
end

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
        banner File.basename($0)
        opt :input, "read from file rather than STDIN", :type => :string
end


assignment = Hash.new
JsonStreamer.new(ZFile.new(opts.input)).each do |row|
  name, tax = row["name"], row["relaxed_consensus"]
  if (name =~/(NODE_|contig[0-9]*|ctg[0-9]*|scf[0-9]*)/)  
    contig = $1
    tax = [tax["kingdom"], tax["phylum"], tax["class"], tax["order"], tax["family"], tax["genus"], tax["species"]]
    if (tax.first != "NO_TREE")
      assignment[contig] = [] if assignment[contig].nil?
      0.upto(6) do |i|
        assignment[contig][i] = Hash.new if !assignment[contig][i]
        tax[i] = "Mixed" if !tax[i]
        assignment[contig][i][tax[i]] = [] if !assignment[contig][i][tax[i]]
        assignment[contig][i][tax[i]].push(name)
      end
    end
  end
end

def scoreContig(assignmentLevel)
  orfs = assignmentLevel.values.flatten
  best = nil
  bestSize = 0
  assignmentLevel.keys.each do |key|
    if assignmentLevel[key].length > bestSize && key != "Mixed"
      best = key
      bestSize = assignmentLevel[key].length
    end
  end
  return [best, (bestSize*100/orfs.size)/100.0] 
end

headers = ["Contig", "Orfs"]
["Species", "Genus", "Family", "Order", "Class", "Phylum", "Kingdom"].each do |rank|
  headers.push(rank)
  headers.push(rank + " Score")
end

print headers.to_csv

rows = Hash.new
orfs = Hash.new
assignment.keys.sort.each do |contig|
  orfs = assignment[contig].collect{|x| x.values}.flatten.sort.uniq
  row = [contig, orfs.size]
  0.upto(6) do |i|
    value, score = scoreContig(assignment[contig][6 - i])
    row.push(value)
    row.push(score)
  end
  print row.to_csv
end

