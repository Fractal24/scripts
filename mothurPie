#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'gchart'
require 'ostruct'

opt = OpenStruct.new
opt.level = 2

ARGV.options {|opts|
  opts.banner << " mothur-classification.txt [mothur-classification.txt...]"
  opts.on("-l ", "--level ", Integer,
          "taxonomic level (default #{opt.level})") {|t| opt.level = t}
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 1)
    STDERR.puts opts
    exit(1)
  end
}

percents = Hash.new

ARGV.each {|mothur|
  counts = Hash.new
  total = 0
  taxon = nil
  File.new(mothur).each {|line|
    name, tx = line.chomp.split("\t")
    fields = tx.gsub(/\([0-9]*\)/, "").gsub("\"","").split(";")
    taxon = fields[opt.level]
    next if taxon.nil?
    taxon.gsub!('"',"")
    counts[taxon] = 0 if counts[taxon].nil?
    counts[taxon] += 1
    total += 0.01
  }
  percents[mothur] = Hash.new
  counts["Misc"] = 0
  percents[mothur]["Misc"] = 0
  counts.keys.each {|key|
    percents[mothur][key] = counts[key]/total if total > 0
  }

  STDERR.printf("\nCategory in #{mothur}, Counts, Percent\n")
  percents[mothur].keys.sort {|x,y| percents[mothur][y] <=> percents[mothur][x]}.each {|key|
    printf("%s,%d,%5.2f\n", key, counts[key], percents[mothur][key]) if (percents[mothur][key]> 0.0)
  }
  
  counts.keys.each {|key|
    if (percents[mothur][key] < 3 && key != "Misc")
      percents[mothur]["Misc"] += percents[mothur][key]
      counts.delete(key)
      percents[mothur].delete(key)
    end
  }
  percents[mothur].delete("Misc") if (percents[mothur]["Misc"] < 3)  
}

colors = ["90B8C0","988CA0","FF9999","99FF99", "CE0000", "000063","5A79A5", "9CAAC6", 
          "DEE7EF", "84596B", "B58AA5", "CECFCE", "005B9A", "0191C8", "74C2E1", 
          "8C8984", "E8D0A9", "B7AFA3", "727B84", "DF9496", "AB9496", "77DE2", "DEAAC6"]

taxa = Hash.new
percents.keys.sort.each {|mothur|
  percents[mothur].keys.each {|taxon|
    taxa[taxon] = 0 if taxa[taxon].nil?
    taxa[taxon] += percents[mothur][taxon]
  }
}

colorTaxa = Hash.new
taxa.keys.sort {|x,y| taxa[y] <=> taxa[x]}.each {|taxon|
  colorTaxa[taxon] = colors.shift if (colors.size > 0)
}

out = File.new(File.basename(ARGV[0], ".txt") + "_chart.html", "w")

ARGV.each {|mothur|
  url = Gchart.pie(:data => percents[mothur].values, :legend => percents[mothur].keys, 
                   :width=>500, :title => mothur)
  choco = ""
  percents[mothur].keys.each {|key|
    choco += colorTaxa[key] + "," 
  }
  choco.chop!
  out.printf("<img src=\"%s&chco=#{choco}\"/>\n\n", url) 
}
out.close
