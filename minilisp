#!/usr/bin/env ruby

require 'sexpistol'
require 'readline'

module MiniLisp
  class Environment
    def initialize(parent = nil)
      @parent = parent
      @table = {}
    end
    def find(name)
      return @table[name] if @table.has_key?(name)
      return nil if @parent.nil?
      return @parent.find(name)
    end
    def define(name, value)
      @table[name] = value
    end
  end
  class Interpreter
    attr_accessor :base_environment,
                  :current_environment
    def initialize
      @base_environment = @current_environment = MiniLisp::Environment.new
    end
    def run(program)
      expressions = Sexpistol.new.parse_string(program)
      result = nil
      expressions.each do |expression|
        result = evaluate(expression)
      end
      return result
    end
    def evaluate(expression)
      return @current_environment.find(expression) if expression.is_a? Symbol
      return expression unless expression.is_a? Array
      if expression[0] == :define
        return @current_environment.define expression[1],
                                           evaluate(expression[2])
      elsif expression[0] == :native_function
        return eval expression[1]
      else # function call
        function = evaluate(expression[0])
        arguments = expression.slice(1, expression.length)
        return function.call(arguments, self)
      end
    end
  end
end

Interpreter = MiniLisp::Interpreter.new
Interpreter.run('(define +
 (native_function "Proc.new() do |arguments, interpreter|
                 arguments.inject(0) {|sum, x| sum += interpreter.evaluate(x)};
                end"))')

Interpreter.run('(define -
  (native_function "
    Proc.new() do |arguments, interpreter|
      tmp = arguments.map {|item| interpreter.evaluate(item)}
      tmp.inject {|sum, n| sum - n}
    end
  "))')

Interpreter.run('(define *
 (native_function "Proc.new() do |arguments, interpreter|
                 arguments.inject(1) {|sum, x| sum *= interpreter.evaluate(x)};
                end"))')

Interpreter.run('(define /
  (native_function "
    Proc.new() do |arguments, interpreter|
      tmp = arguments.map {|item| interpreter.evaluate(item)}
      tmp.inject {|sum, n| sum / n}
    end
  "))')

Interpreter.run(%q!(define display
  (native_function "
    Proc.new() do |arguments, interpreter|
      output = interpreter.evaluate(arguments[0])
      print output
      output
    end
  "))!)

Interpreter.run(%q!(define if
  (native_function "
    Proc.new() do |arguments, interpreter|
      if(interpreter.evaluate(arguments[0]))
        interpreter.evaluate(arguments[1])
      else
        interpreter.evaluate(arguments[2]) unless(arguments[2].nil?)
      end
    end
  "))!)

Interpreter.run(%q!
(define >
  (native_function "
    Proc.new() do |arguments, interpreter|
      arguments.slice(1, arguments.length).all? do |x|
        interpreter.evaluate(arguments[0]) > interpreter.evaluate(x)
      end
    end
  "))!)

Interpreter.run(%q!
(define <
  (native_function "
    Proc.new() do |arguments, interpreter|
      arguments.slice(1, arguments.length).all? do |x|
        interpreter.evaluate(arguments[0]) < interpreter.evaluate(x)
      end
    end
  "))!)

Interpreter.run(%q/(define =
  (native_function "
    Proc.new() do |arguments, interpreter|
      !(arguments.map{|x| interpreter.evaluate(x) ==
interpreter.evaluate(arguments[0])}).include?( false )
                end"))/)
Interpreter.run(%q!
(define lambda
 (native_function "
    Proc.new() do |arguments, interpreter|
      formals = arguments[0]
      body = arguments.slice(1, arguments.length)

      if formals.is_a? Array
        # detect if any formal names have been used more than once
        error_message = 'Formal {FORMAL} declared more than once'
        formals.each_index do |x|
          tmp = formals.dup
          tmp.delete_at(x)
          raise(error_message.gsub('{FORMAL}',
                       formals[x])) if tmp.include? formals[x]
        end
      end

      sub_env = Environment.new(interpreter.current_environment)

      execute_body = Proc.new() do |body, environment, interpreter|
        interpreter.current_environment = environment
        result = nil
        body.each do |expression|
          result = interpreter.evaluate(expression)
        end
        interpreter.current_environment = environment.parent
        result
      end

      if formals.is_a?(Array) && formals.include?(:'.')
        Proc.new() do |arguments, interpreter|
          args = arguments.dup
          named_formals = formals.slice(0, formals.index(:'.'))
          list_formal = formals[formals.index(:'.') + 1]
          named_formals.each_index do |i|
            sub_env.define(named_formals[i], interpreter.evaluate(args.shift))
          end
          sub_env.define(list_formal, args)
          execute_body.call(body, sub_env, interpreter)
        end

      elsif formals.is_a? Array
        Proc.new() do |arguments, interpreter|
          formals.each_index do |i|
            sub_env.define(formals[i], interpreter.evaluate(arguments[i]))
          end
          execute_body.call(body, sub_env, interpreter)
        end

      elsif formals.is_a? Symbol
        Proc.new() do |arguments, interpreter|
          arguments = arguments.map {|x| interpreter.evaluate(x) }
          sub_env.define(formals, arguments)
          execute_body.call(body, sub_env, interpreter)
        end
      end
    end
  "))!)


loop do
  line = Readline::readline('> ')
  break if line.nil? || line == 'quit'
  Readline::HISTORY.push(line)
  result = Interpreter.run(line)
  print result.to_s+"\n"
end
