#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'rubygems'
require 'ZFile'
require 'bio'

opt = OpenStruct.new
o = OptionParser.new

opt.template=ENV["HOME"] + "/lib/mothur/silva/alignment/silva.bacteria.fasta"

o.banner << " fasta [..fasta...]"
o.on("-t ", "--template ", String, 
  "template for alignment (#{opt.template})") {|t| opt.template = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1)
  STDERR << o
  exit(1)
end

def cleanup(dir)
  system("rm -rf #{dir}")	
end

ARGV.each do |fasta|
  name = File.basename(fasta).split(/\.[A-Z|a-z]/).first
  tmpdir = ENV["HOME"] + "/.tmp"
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tmpdir += "/" + name + "_" + Time.now.to_f.to_s
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  if (opt.template !~/^\//)
    opt.template = ENV["PWD"] + "/" + opt.template
  end
  out = File.new(tmpdir + "/seq.fasta", "w")
  taxinfo = Hash.new
  Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(fasta)).each do |seq|
    taxinfo[seq.entry_id] = seq.definition.split(" ", 2).last
    out.print seq
  end
  batch = File.new(tmpdir + "/batch", "w")
  batch.printf("align.seqs(candidate=seq.fasta, template=#{opt.template}, flip=T, processors=2)")
  batch.close
  system("cd #{tmpdir};mothur batch >/dev/null")
  out = File.new(name + ".afa", "w")
  Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(tmpdir + "/seq.align")).each do |seq|
    out.print seq.seq.gsub(".","-").to_fasta(seq.entry_id + " " + taxinfo[seq.entry_id], 60)
  end
  out.close
  cleanup(tmpdir)
end