#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'rubygems'
require 'csv'
require 'Silva'

opt = OpenStruct.new
o = OptionParser.new
o.banner << " csv-file high-low-cutoff"
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 3)
  STDERR << o
  exit(1)
end

csv, cutoff, level = ARGV
cutoff = cutoff.to_i
level = level.to_i

silva = Silva.new("/Users/jbadger/SSURef_102.tax", "/Users/jbadger/SSURef_102.afa.bz2")

highCounts = Hash.new
lowCounts = Hash.new
highTot = 0.0
lowTot = 0.0

CSV.foreach(csv) do |row|
  next if row[0].nil?
  org, num = row[0], row[4]
  num = num.to_i
  sp, rest = org.split(" ")
  tax = silva.findTaxonomy(sp)
  next if tax.nil?
  tax = tax.split(";")
  taxon = tax[level]
  taxon = tax[level + 1] if taxon == "Proteobacteria" 
  if (num >= cutoff)
    highCounts[taxon] = 0 if highCounts[taxon].nil?
    highCounts[taxon] += 1
    highTot += 1
  else
    lowCounts[taxon] = 0 if lowCounts[taxon].nil?
    lowCounts[taxon] += 1
    lowTot += 1
  end
end

highCounts.keys.sort {|x, y| highCounts[y] <=> highCounts[x]}.each do |key|
  printf("High:%s %5.1f%%\n", key, highCounts[key]*100/highTot)
end

printf("\n\n")
lowCounts.keys.sort {|x, y| lowCounts[y] <=> lowCounts[x]}.each do |key|
  printf("Low:%s %5.1f%%\n", key, lowCounts[key]*100/lowTot)
end