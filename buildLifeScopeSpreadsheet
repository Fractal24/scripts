#!/usr/bin/env ruby

require 'csv'

if (ARGV.size < 3)
	STDERR << "Usage: " << File.basename($0) << " gtf-file annotation-file count.txt [...count.txt...]\n"
	exit(1)
end

gtf = ARGV.shift
annotation = ARGV.shift

tid = Hash.new
gid = Hash.new
loc = Hash.new

File.new(gtf).each do |line|
	seqname, source, feature, start, stop, score, strand, frame, meta = line.chomp.split("\t")
	t = nil
	g = nil
	meta.split("; ").each do |field|
		key, value = field.gsub('"','').gsub(";","").split(" ")
		t = value if (key == "transcript_id")
		g = value if (key == "gene_id")
	end
	if (t && feature=="exon")
		tid[g] = t
		gid[t] = g
		loc[t] = seqname + " " + start + " " + stop + " " + strand
	end
end

ann = Hash.new
File.new(annotation).each do |line|
	t = line.chomp.split("\t").first
	ann[t] = line.chomp.split("\t") - [t]
	ann[t].shift
end

ARGV.each do |count|
	STDERR.printf("Processing %s...\n", count)
	outName = File.basename(count, ".tab")+".csv"
	next if File.exists?(outName)
	out = File.new(outName, "w")
	rpkms = Hash.new
	File.new(count).each do |row|
		g, chr, strand, start, stop, count, len, rp = row.chomp.split("\t")
		if (tid[g])
			rpkms[tid[g]] = rp.to_f
		end
	end

	out.print ["Transcript Id", "Location", "RPKM", "GI", "Annotation", "SwissProt", "SwissProt Annotation", "KEGG", "KEGG Def", 
		"GOS Cluster", "Phytax Cluster", "Phytax", "KO", "KO Def", "PFAM", "PFAM Def", "PFAM2GO", "TFAM", "TFAM Def",
		"TFAM2GO", "COG", "COG Def", "Plant", "Animal"].to_csv
	rpkms.keys.sort {|x, y| rpkms[y] <=> rpkms[x]}.each do |t|
		if (rpkms[t] > 0.1)
			out.print ([t, loc[t], rpkms[t]]+ann[t].to_a).to_csv
		end
	end
	out.close
end