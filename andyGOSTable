#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'rubygems'
require 'dm-core'


opt = OpenStruct.new

opt.all = false
opt.storage = "gosii_io_apis"
opt.host = "mysql-lan-pro"
opt.kingdom = false
opt.filter = false
opt.exp = false


ARGV.options do |opts|
  opts.banner << " [dataset .. dataset..]"
  opts.on("-a", "--all", "include all datasets in database") {|t| opt.all = t}
  opts.on("-e ", "--expression ", String, "include datasets matching substring") {|t| opt.exp = t}
  opts.on("-f", "--filter", "group by filter (not sample)") {|t| opt.filter = t}
  opts.on("-k ", "--kingdom ", String, "limit to kingdom (default #{opt.kingdom})") {|t| opt.kingdom = t}
  opts.on("-s ", "--storage ", String, "storage database (default #{opt.storage})") {|t| opt.storage = t}
  opts.on("-h ", "--host ", String, "database host (default #{opt.host})") {|t| opt.host = t}
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 1 && (!opt.all && !opt.exp))
    STDERR.puts opts
    exit(1)
  end
end

DataMapper.setup(:default, "mysql://" + "apis:apis_user@" + opt.host + "/" + opt.storage)
storage = repository(:default).adapter

if (opt.all)
  storage.select("select dataset from dataset").each do |row|
    ARGV.push(row)
  end
end

if (opt.exp)
  storage.select("select dataset from dataset where dataset like '%#{opt.exp}%'").each do |row|
    ARGV.push(row)
  end
end

classified = Hash.new
number = Hash.new

list = ["Synechococcus", "Prochlorales", "Other Cyanos", "Candidatus Pelagibacter", 
        "Rhodobacterales", "Other Alphas", "Gammaproteobacteria", "Firmicutes",
       "Actinobacteria", "Bacteroidetes/Chlorobi group", 
        "Chlamydiae/Verrucomicrobia group", "Deltaproteobacteria", 
        "Betaproteobacteria", "Epsilonproteobacteria", "Spirochaetes", 
        "Thermotogae", "Planctomycetes", "Other Bacteria"]
ali = {"Candidatus Pelagibacter" => "SAR11 cluster"}

groups = {"Synechococcus" => "genus", "Prochlorales" => "ord", "Other Cyanos" => nil,
  "Candidatus Pelagibacter" => "genus", "Rhodobacterales" => "ord", "Other Alphas" => nil,
  "Gammaproteobacteria" => "class", "Firmicutes" => "phylum", "Actinobacteria" => "phylum", 
  "Deltaproteobacteria" => "class", "Betaproteobacteria" => "class", 
  "Epsilonproteobacteria" => "class", "Spirochaetes" => "phylum",
  "Thermotogae" => "phylum", "Planctomycetes" => "phylum",
  "Eukaryota" => "kingdom", "Viruses" => "kingdom"}

if (opt.kingdom)
  king = "AND kingdom = '#{opt.kingdom}'"
else
  king = ""
end

ARGV.each do |dataset|
  if (opt.filter)
    sample = storage.select("SELECT value FROM metadata WHERE dataset='#{dataset}' AND prop = 'filter'").first
  else
    sample = storage.select("SELECT value FROM metadata WHERE dataset='#{dataset}' AND prop = 'site'").first
  end
  if (sample.nil?)
    STDERR.printf("%s has no sample info! Skipping\n", dataset)
    next
  end
  if (classified[sample].nil?)
    classified[sample] = 0
    number[sample] = Hash.new
    list.each do |taxon|
      number[sample][taxon] = 0
    end
  end
  classified[sample] += storage.select("SELECT count(*) FROM classification WHERE dataset = '#{dataset}' #{king}").first
  list.each do |taxon|
    if (!groups[taxon].nil?)
      number[sample][taxon] += storage.select("SELECT count(*) FROM classification WHERE #{groups[taxon]} = '#{taxon}' AND dataset = '#{dataset}' #{king}").first
    elsif taxon == "Other Cyanos"
      number[sample][taxon] += storage.select("SELECT count(*) FROM classification WHERE phylum = 'Cyanobacteria' AND dataset = '#{dataset}' #{king}").first
    elsif taxon == "Other Alphas"
      number[sample][taxon] += storage.select("SELECT count(*) FROM classification WHERE class = 'Alphaproteobacteria' AND dataset = '#{dataset}' #{king}").first
    elsif taxon == "Bacteroidetes/Chlorobi group"
      number[sample][taxon] += storage.select("SELECT count(*) FROM classification WHERE phylum = 'Bacteroidetes' AND dataset = '#{dataset}' #{king}").first
      number[sample][taxon] += storage.select("SELECT count(*) FROM classification WHERE phylum = 'Chlorobi' AND dataset = '#{dataset}' #{king}").first
    elsif taxon == "Chlamydiae/Verrucomicrobia group"
      number[sample][taxon] += storage.select("SELECT count(*) FROM classification WHERE phylum = 'Chlamydiae' AND dataset = '#{dataset}' #{king}").first
      number[sample][taxon] += storage.select("SELECT count(*) FROM classification WHERE phylum = 'Verrucomicrobia' AND dataset = '#{dataset}' #{king}").first  
    end
  end
end

if (opt.filter)
  printf("Filter Size")
else
  printf("Sample")
end

list.each do |taxon|
  printf(",%s", taxon)
end
printf("\n")

classified.keys.sort.each do |sample|
  printf("%s", sample)
  list.each do |taxon|
    if (taxon == "Other Cyanos")
      number[sample][taxon] -= number[sample]["Synechococcus"]
      number[sample][taxon] -= number[sample]["Prochlorales"]
    elsif (taxon == "Other Alphas")
      number[sample][taxon] -= number[sample]["Candidatus Pelagibacter"]
      number[sample][taxon] -= number[sample]["Rhodobacterales"]
    end
    printf(",%5.2f%%", number[sample][taxon] * 100.0 / classified[sample])
  end
  printf("\n")
end
