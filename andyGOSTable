#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'rubygems'
require 'apis'
opt = OpenStruct.new

opt.all = false
opt.storage = "gosii_io_apis"
opt.host = "mysql-lan-pro"
opt.filter = false

ARGV.options {|opts|
  opts.banner << " [dataset .. dataset..]"
  opts.on("-a", "--all", "include all datasets in database") {|t| opt.all = t}
  opts.on("-f", "--filter", "group by filter (not sample)") {|t| opt.filter = t}
  opts.on("-s ", "--storage ", String, "storage database (default #{opt.storage})") {|t| opt.storage = t}
  opts.on("-h ", "--host ", String, "database host (default #{opt.host})") {|t| opt.host = t}
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 1 && !opt.all)
    STDERR.puts opts
    exit(1)
  end
}

storage = MySQL.new(opt.host, opt.storage, "apis", "apis_user")

# parse sample into biologically meaningful name
def parseSample(sample, filter)
  if sample =~/GSIOLG([0-9]+)/ || sample =~/GS-(01a)/
    name = "GS" + $1 + "-3.0"
  elsif sample =~/GSIOSM([0-9]+)/ || sample =~/GS-(01b)/ || sample =~/GS-(25)/
    name = "GS" + $1 + "-0.8"
  elsif sample =~/GSIOVIR([0-9]+)/
    name = "GS" + $1 + "-VIR"
  elsif sample =~/GS([0-9]+)/
    name = "GS" + $1 + "-0.1"
  elsif sample =~/GS-([0-9|a-z]+)/
    name = "GS" + $1 + "-0.1"
  end
  name.gsub!("GS4","GS04") if (opt.storage == "gosii_io_apis")
  if (filter)
    return name.split("-").last
  else
    return name
  end
end

class MySQL
  # return counts of a given taxon given level and dataset
  def countTaxa(taxon, level, dataset)
    cnt = "classification WHERE dataset = '#{dataset}' "
    cnt += "AND #{level} = '#{taxon}'"
    return count(cnt)
  end
end

if (opt.all)
  storage.query("select dataset from dataset").each {|row|
    ARGV.push(row[0])
  }
end


proteins = Hash.new
classified = Hash.new
number = Hash.new

list = ["Synechococcus", "Prochlorales", "Other Cyanos", "SAR11 cluster", 
        "Rhodobacterales", "Other Alphas", "Gammaproteobacteria", "Firmicutes",
       "Actinobacteria", "Bacteroidetes/Chlorobi group", 
        "Chlamydiae/Verrucomicrobia group", "Deltaproteobacteria", 
        "Betaproteobacteria", "Epsilonproteobacteria", "Spirochaetes", 
        "Thermotogae", "Planctomycetes", "Eukaryota", "Viruses"]
groups = {"Synechococcus" => "ord", "Prochlorales" => "class", "Other Cyanos" => nil,
  "SAR11 cluster" => "family", "Rhodobacterales" => "ord", "Other Alphas" => nil,
  "Gammaproteobacteria" => "class", "Firmicutes" => "phylum", 
  "Actinobacteria" => "phylum", "Bacteroidetes/Chlorobi group" => "phylum",
  "Chlamydiae/Verrucomicrobia group" => "phylum",
  "Deltaproteobacteria" => "class", "Betaproteobacteria" => "class", 
  "Epsilonproteobacteria" => "class", "Spirochaetes" => "phylum",
  "Thermotogae" => "phylum", "Planctomycetes" => "phylum",
  "Eukaryota" => "kingdom", "Viruses" => "kingdom"}

ARGV.each {|dataset|
  sample = parseSample(dataset, opt.filter)
  if (proteins[sample].nil?)
    proteins[sample] = 0
    classified[sample] = 0
    number[sample] = Hash.new
    list.each {|taxon|
      number[sample][taxon] = 0
    }
  end
  proteins[sample] += storage.count("sequence WHERE dataset = '#{dataset}'")
  classified[sample] += storage.count("classification WHERE dataset = '#{dataset}'")
  list.each {|taxon|
    if (!groups[taxon].nil?)
      number[sample][taxon] += storage.countTaxa(taxon, groups[taxon], dataset)
    elsif taxon == "Other Cyanos"
      number[sample][taxon] += storage.countTaxa("Cyanobacteria", "phylum", dataset)
    elsif taxon == "Other Alphas"
      number[sample][taxon] += storage.countTaxa("Alphaproteobacteria", "class", dataset)
    end
  }
}

if (opt.filter)
  printf("Filter Size")
else
  printf("Sample")
end

printf(",# proteins,%% classified")
list.each {|taxon|
  printf(",%s,", taxon)
}
printf("\n")

proteins.keys.sort.each {|sample|
  printf("%s,%d,%5.1f%%", sample, proteins[sample], classified[sample] * 100.0 / 
         proteins[sample])
  list.each {|taxon|
    if (taxon == "Other Cyanos")
      number[sample][taxon] -= number[sample]["Synechococcus"]
      number[sample][taxon] -= number[sample]["Prochlorales"]
    elsif (taxon == "Other Alphas")
      number[sample][taxon] -= number[sample]["SAR11 cluster"]
      number[sample][taxon] -= number[sample]["Rhodobacterales"]
    end
    printf(",%d,%5.2f%%", number[sample][taxon],
           number[sample][taxon] * 100.0 / classified[sample])
  }
  printf("\n")
}
