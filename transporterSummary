#!/usr/bin/env ruby

require 'active_record'

require 'optparse'
require 'ostruct'
require 'csv'

class Sequence < ActiveRecord::Base
  has_one :transporter
  has_one :newtransporter
  has_one :gosgroup
end

class Transporter < ActiveRecord::Base
  belongs_to :sequence
  has_one :gosgroup, :through => :sequence
end

class Newtransporter < ActiveRecord::Base
  belongs_to :sequence
  has_one :gosgroup, :through => :sequence
end

class Gosgroup < ActiveRecord::Base
  belongs_to :sequence
end

# connect using a url-style driver://user:password@server/database
def connectDB(url)
  token = "[a-z|0-9|A-Z|_|-]+"
  if (url =~/(#{token}):\/\/(#{token}):(#{token})\@(#{token})\/(#{token})/)
    driver, user, password, server, database = $1, $2, $3, $4, $5
    ActiveRecord::Base.establish_connection(:adapter  => driver,
    :host => server, :username=> user, :password=> password,
    :database=> database)
  else
    STDERR << "can't parse " << url << "\n"
    exit(1)
  end
end

opt = OpenStruct.new
opt.host = "mysql://jbadger:plankton@localhost"

o = OptionParser.new
o.banner << " table"
o.on("-h ", "--host ", String, "database host (#{opt.host})") {|t| opt.host = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1)
  STDERR << o
  exit(1)
end


connectDB(opt.host + "/" + ARGV.first)
families = Transporter.select("distinct(family)").collect{|x| x.family}.sort
datasets = Sequence.select("distinct(dataset)").collect{|x| x.dataset}.sort
taxa = Gosgroup.select("distinct(taxon)").collect{|x| x.taxon}.sort

header = [""] + taxa
print header.to_csv

datasets.each do |dataset|
  families.each do |family|
    next if family == ""
    ["old", "new"].each do |condition|
      line = [dataset + " " + family + " " + condition]
      taxa.each do |taxon|
        if (condition == "old")
          line.push(Sequence.joins(:transporter, :gosgroup).where("gosgroups.taxon = ? AND transporters.family = ?",taxon, family).count)
        else
          line.push(Sequence.joins(:newtransporter, :gosgroup).where("gosgroups.taxon = ? AND newtransporters.family = ?",taxon, family).count)
        end
      end
      print line.to_csv
    end
  end
end

