#!/usr/bin/env ruby

require 'dm-core'
require 'GOS'
require 'csv'

DataMapper.setup(:default, "mysql://jbadger:plankton@mysql-lan-pro/gosii_io_apis") 

counts = Hash.new
families = Hash.new
groups = Hash.new

query = "select count(mtName) as count, mtLibrary, mtFid, phylum, class as cl, "
query += "genus from transporters, classification where mtName=seq_name "
query += "group by mtFid, mtLibrary"

repository(:default).adapter.select(query).each do |row|
  filter = classifySample(row.mt_library)
  next if filter == "VIR"
  group = row.phylum
  if (row.genus =~/Pelagibacter/)
    group = "Pelagibacter"
  elsif (row.genus =~/Prochlorococcus/)
    group = "Prochlorococcus"
  elsif (row.genus =~/Synechococcus/)
    group = "Synechococcus"
  elsif (row.cl == "Alphaproteobacteria")
    group = "Other alphaproteobacteria"
  elsif (group == "Cyanobacteria")
    group = "Other cyanobacteria"
  elsif (group =~/Bacteroidetes|Chlorobi/)
    group = "Bacteroidetes/Chlorobi"
  elsif (row.cl =~/Betaproteobacteria/)
    group = "Betaproteobacteria"
  elsif (row.cl =~/Gammaproteobacteria/)
    group = "Gammaproteobacteria"
  elsif (row.cl =~/Deltaproteobacteria/)
    group = "Deltaproteobacteria"
  elsif (row.cl =~/Epsilonproteobacteria/)
    group = "Epsilonproteobacteria"
  elsif (group =~/Proteobacteria/)
    group = "Other proteobacteria"
  elsif (group =~/Rhodobacterales/)
    group = "Rhodobacterales"
  elsif (group =~/Actinobacteria/)
    group = "Actinobacteria"  
  elsif (group =~/Firmicutes/)
    group = "Firmicutes" 
  elsif (group =~/Chlamydiae|Verrucomicrobia/)
    group = "Chlamydiae/Verrucomicrobia"
  elsif (group =~/Spirochaetes/)
    group = "Spirochaetes"
  elsif (group =~/Thermotogae/)
    group = "Thermotogae"
  elsif (group =~/Planctomycetes/)
    group = "Planctomycetes"  
  elsif (group =~/Unknown/)
    group = "Unknown bacteria" 
  else 
    group = "Other bacteria"
  end
  counts[filter] = Hash.new if counts[filter].nil?
  counts[filter][row.mt_fid] = Hash.new if counts[filter][row.mt_fid].nil?
  counts[filter][row.mt_fid][group] = 0 if counts[filter][row.mt_fid][group].nil?
  counts[filter][row.mt_fid][group] += row.count
  families[row.mt_fid] = true
  groups[group] = true
end


counts.keys.sort.each do |filter|
  out = File.new("priority_" + filter.to_s + "_transporter_families.csv", "w")
  header = [""] + groups.keys.sort + groups.keys.sort.collect{|x| "% " + x}
  out.print header.to_csv
  families.keys.sort.each do |family|
    percents = []
    row = [family]
    next if counts[filter][family].nil?
    sum = counts[filter][family].keys.reduce(0) {|s, group| s + counts[filter][family][group].to_i}
    groups.keys.sort.each do |group|
      row.push(counts[filter][family][group].to_i)
      percents.push((1000*counts[filter][family][group].to_i / sum)/10.0)
    end
    row += percents
    out.print row.to_csv
  end
  out.close
end
