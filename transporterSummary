#!/usr/bin/env ruby

require 'active_record'

require 'optparse'
require 'ostruct'
require 'csv'

class Sequence < ActiveRecord::Base
  has_one :transporter
  has_one :gosgroup
end

class Transporter < ActiveRecord::Base
  set_table_name "newtransporters"
  belongs_to :sequence
  has_one :gosgroup, :through => :sequence
end

class Gosgroup < ActiveRecord::Base
  belongs_to :sequence
end

# connect using a url-style driver://user:password@server/database
def connectDB(url)
  token = "[a-z|0-9|A-Z|_|-]+"
  if (url =~/(#{token}):\/\/(#{token}):(#{token})\@(#{token})\/(#{token})/)
    driver, user, password, server, database = $1, $2, $3, $4, $5
    ActiveRecord::Base.establish_connection(:adapter  => driver,
    :host => server, :username=> user, :password=> password,
    :database=> database)
  else
    STDERR << "can't parse " << url << "\n"
    exit(1)
  end
end

opt = OpenStruct.new
opt.host = "mysql://jbadger:plankton@localhost"

o = OptionParser.new
o.banner << " table"
o.on("-h ", "--host ", String, "database host (#{opt.host})") {|t| opt.host = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1)
  STDERR << o
  exit(1)
end


connectDB(opt.host + "/" + ARGV.first)

pepCounts = Hash.new
totals = Hash.new
counts = Hash.new
families = Hash.new
taxa = Hash.new

STDERR << "Counting Sequences....\n"
Sequence.includes(:gosgroup).group(:dataset, :taxon).count.each do |key, value|
  dataset, taxon = key
  totals[dataset] = 0 if (!totals[dataset])
  pepCounts[dataset] = Hash.new if (!pepCounts[dataset])
  pepCounts[dataset][taxon] = value
  totals[dataset] += value
end 

STDERR << "Counting Transporters...\n"
ActiveRecord::Base.connection.execute("select count(seq_name), dataset, taxon, family 
from sequences, newtransporters,gosgroups 
where newtransporters.sequence_id=sequences.id and gosgroups.sequence_id=sequences.id 
group by dataset, family,taxon;").each do |row|
  count, dataset, taxon, family = row
  next if family.nil? || family == ""
  families[family] = true if (!families[family])
  taxa[taxon] = true if (!taxa[taxon])
  counts[dataset] = Hash.new if !counts[dataset]
  counts[dataset][taxon] = Hash.new if !counts[dataset][taxon]
  counts[dataset][taxon][family] = count
end

print ([""] + taxa.keys.sort).to_csv
counts.keys.each do |dataset|
  row = [dataset + " peptides"]
  taxa.keys.sort.each do |taxon|
    row.push(pepCounts[dataset][taxon])
  end
  row.push(totals[dataset])
  print row.to_csv
  families.keys.sort.each do |family|
    row = [dataset + " " + family]
    taxa.keys.sort.each do |taxon|
      row.push(counts[dataset][taxon][family])
    end
    print row.to_csv
  end
end

