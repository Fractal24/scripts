#!/usr/bin/env ruby
require 'ostruct'
require 'rubygems'
require 'bio'
require 'optparse'
opt = OpenStruct.new

opt.domain = nil
opt.project = nil
opt.queue = "fast"

$VERBOSE = false

ARGV.options {|opts|
  opts.banner << " fasta"
  opts.on("-d ", "--domain ", String, 
	  "limit to domain (P or E)") {|t| opt.domain = t}
  opts.on("-p", "--project ", String,  "JCVI project number") {|t| opt.project = t}
  opts.on("-q ", "--queue ", String, 
	  "grid queue to use (default #{opt.queue})") {|t| opt.queue = t}
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size != 1)
    STDERR.puts opts
    exit(1)
  end
}

file, rest = ARGV

Bio::FlatFile.new(Bio::FastaFormat, File.new(file)).each {|seq|
  name = seq.entry_id + ".seq"
  out = File.new(name, "w")
  seq.data = seq.data.tr("T","U")
  seq.data = seq.data.tr("t","u")
  out.print seq
  out.close
  script = "/home/jbadger/PLANKTON/NEW_STAP/scripts/rRNA_pipeline_for_one.pl"
  script += " -d #{opt.domain}" if (opt.domain)
  cmd = "#{script} -i #{name}"
  if (opt.project.nil?)
    system(cmd)
  else
    STDERR.printf("Submitting %s...\n", name)
    qsub = "qsub -P #{opt.project} -l \"#{opt.queue},memory=7G\" -e stap.err -cwd -o stap.out "
    qsub += "\"#{cmd}\""
    system(qsub + "  >/dev/null 2>/dev/null")
  end
}
