#!/usr/bin/env ruby

require 'rubygems'
require 'bio'
require 'optparse'
require 'ostruct'
require 'ZFile'   

opt = OpenStruct.new
opt.file = nil
opt.inverse = nil
opt.unique = false

o = OptionParser.new
o.banner << " expression fasta [...fasta...]"
o.on("-f ", "--file ", String, 
        "read list of ids to search from file") {|f| opt.file = f} 
o.on("-u", "--unique", "only returm sequence once") {opt.unique = true}   
o.on("-v", "--inverse", "return lines not matching expression") {opt.inverse = true}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 2 && opt.file.nil?)
  STDERR << o
  exit(1)
end

seen = Hash.new
if (opt.file)
  express = false
  File.new(opt.file).each do |line|
    seen[line.chomp.split(" ").first] = true
  end
else
  express = ARGV.shift
end


printed = Hash.new
ARGV.each do |fasta|
  Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(fasta)).each do |seq|
    sname = seq.definition.split(" ").first
    next if (opt.unique && printed[sname])
    if (express)
      if (!opt.inverse)
        print seq if (seq.definition == express)
        printed[sname]=true
      else
        print seq if (seq.definition != express)
        printed[sname]=true
      end
    else
      if (!opt.inverse)
        print seq if (seen[sname])
        printed[sname]=true
      else
        print seq if (!seen[sname])
        printed[sname]=true
      end
    end
  end
end
