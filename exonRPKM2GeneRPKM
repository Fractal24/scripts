#!/usr/bin/env python

import re
import os.path
import sys
from optparse import OptionParser

# Process command line options
parser = OptionParser(usage="usage: %prog [options] rpkm-file [...rpkm-file...]")
#parser.add_option("-q", "--qsub", help="qsub subcalls", action="store_true")
(opts, args) = parser.parse_args()

if len(args) < 1:
	parser.print_help()
	sys.exit(1)

for rpkm in args:
	totReads = []
	counts = {}
	geneLens = {}
	(experiment, sample, rest) = rpkm.split("-", 2)
	input = open(rpkm, "r")
	for line in input:
		(chr, source, label, start, end, score, strand, frame, attributes) = line.rstrip().split("\t")
		m = re.search("gene_id \"(.*)\"; transcript_id \"(.*)\"; RPKM \"(.*)\"", attributes)
		(gene, transcript, rpkm) = (m.group(1), m.group(2), float(m.group(3)))
		if rpkm > 0 and label == "exon":
			score = int(score)
			exonLen = float(1 + int(end) - int(start))/1000
			totReads.append(score/(exonLen*rpkm))
			if not geneLens.has_key(transcript): geneLens[transcript] = 0
			if not counts.has_key(transcript): counts[transcript] = 0
			geneLens[transcript] += exonLen
			counts[transcript] += score
	input.close

	avgTotReads = sum(totReads)/len(totReads)
	for transcript in sorted(counts.keys()):
		trpkm = counts[transcript]/(geneLens[transcript]*avgTotReads)
		print "%s\t%s\t%s\t%8.3f" % (experiment, sample, transcript, trpkm)
