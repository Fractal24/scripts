#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'rubygems'
require 'bio'
require 'ZFile'

opt = OpenStruct.new
opt.sig = 0.75

ARGV.options do |opts|
  opts.banner << " phymm-results.txt reads-with-species.fa tax-file"
  opts.on("-s ", "--significance", Float, 
            "minimum significance (default #{opt.sig})") {|t| opt.sig = t}
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size != 3 )
    STDERR.puts opts
    exit(1)
  end
end

calls, reads, tax = ARGV


taxonomy = Hash.new
File.new(tax).each do |line|
  sp, levels = line.chomp.split("\t", 2)
  levels = levels.split("\t")
  genus, sp = sp.split(" ")
  taxonomy[genus] = levels
end

species = Hash.new
Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(reads)).each do |seq|
  if (seq.definition =~/SOURCE_1=\"([^\"]*)\"/)
    org, rest = $1.split(" {", 2)
    sp, rest = org.split(" ")
  end
  species[seq.entry_id] = sp
end

wrong = Hash.new
File.new(calls).each do |line|
  next if line =~/^Query/i
  id, match, score, rest = line.chomp.split("\t", 4)
  tx = taxonomy[species[id]]
  rest = rest.split("\t")
  results = []
  signif = []
  if (rest.size < 6) # phymm
    results[5], results[4], results[3], results[2], results[1] = rest
    signif = [1.00]*6
  else # phymmBL
    results[5], signif[5], results[4], signif[4], 
    results[3], signif[3], results[2], signif[2], 
    results[1], signif[1] = rest
    signif.collect! {|x| x.to_f}
  end
  levels = ["Kingdom", "Phylum", "Class", "Order", "Family", "Genus"]
  levels.size.times do |i|
    next if levels[i] == "Kingdom"
    break if (signif[i].nil? || signif[i] < opt.sig)
    if (results[i] != tx[i])
      wrong[levels[i]] = File.new("wrong_#{levels[i]}_#{calls}.txt", "w") if (!wrong[levels[i]])
      wrong[levels[i]].printf("%s\t%s\n", results[i], tx[i])
    end
  end
end

wrong.keys.each do |key|
  wrong[key].close
end
