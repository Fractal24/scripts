#!/usr/bin/env ruby

require 'rubygems'
require 'dm-core'
require 'optparse'
require 'ostruct'
require 'bio'
require 'Btab'
require 'ZFile'
require 'GeneExpression'
require 'csv'

ARGV.flatten!

opt = OpenStruct.new
o = OptionParser.new
opt.database = false
opt.posmap = nil

o.banner << " btab [btab...] [fna...]"
o.on("-d", "--database", "use database") {opt.database = true}
o.on("-p ", "--posmap ", String, "use posmap file supplied") {|t| opt.posmap = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1)
  STDERR << o
  exit(1)
end

DataMapper.setup(:default, "mysql://access:access@mysql-lan-pro/phylodb")

btabs = ARGV.grep(/btab/)

protHits = Hash.new
annotation = Hash.new
species = Hash.new
speciesHits = Hash.new
geneHits = Hash.new
conditions = []
total = Hash.new
condTot = Hash.new
posCounts = Hash.new

if (opt.posmap)
  STDERR.printf("Loading posmap...\n")
  ZFile.new(opt.posmap).each do |line|
    contig, read = line.chomp.split("\t")
    condition = read.split("_").first
    conditions.push(condition) if (!conditions.include?(condition))
    posCounts[contig] = Hash.new if (!posCounts[contig])
    posCounts[contig][condition] = 0 if (!posCounts[contig][condition])
    posCounts[contig][condition] += 1
  end
else
  btabs.each do |btab|
    condition = File.basename(btab.split("_vs_").first, ".fna").split(".btab").first
    conditions.push(condition)
    
  end
end




btabs.each do |btab|
  if (opt.posmap)
    conds = conditions
  else  
    conds = [File.basename(btab.split("_vs_").first, ".fna").split(".btab").first]
  end
  STDERR << "Loading #{btab}...\n"
  Btab.new(btab).each do |query|
    conds.each do |condition|
      match = query.matches.first
      protHits[match.name] = Hash.new if (protHits[match.name].nil?)
      protHits[match.name][condition] = 0 if (protHits[match.name][condition].nil?)
      cname = query.name.split(" ").first
      if (opt.posmap)
        protHits[match.name][condition] += posCounts[cname][condition].to_i
      else
        protHits[match.name][condition] += 1
      end
      speciesHits[match.species] = Hash.new if (speciesHits[match.species].nil?)
      speciesHits[match.species][condition] = 0 if (speciesHits[match.species][condition].nil?)
      speciesHits[match.species][condition] += 1
      species[match.name] = match.species
      annotation[match.name] = match.annotation
      total[match.name] = 0 if total[match.name].nil?
      if (opt.posmap)
        total[match.name] += posCounts[cname][condition].to_i
      else
        total[match.name] += 1
      end
      condTot[condition] = 0 if (!condTot[condition])
      if (opt.posmap)
        condTot[condition] += posCounts[cname][condition].to_i
      else
        condTot[condition] += 1
      end
      geneHits[match.species] = Hash.new if (geneHits[match.species].nil?)
      geneHits[match.species][condition] = Hash.new if (geneHits[match.species][condition].nil?)
      geneHits[match.species][condition][match.name] = true
    end
  end
end

header = ["Protein", "Species"] + conditions + ["Total"]
conditions.each do |condition|
  header.push(condition + ".by.station") 
end
conditions.each do |condition|
  header.push(condition + ".by.species") 
end
conditions.each do |condition|
  header.push("Taxon.Gene." + condition) 
end
conditions.each do |condition|
  header.push("Taxon.Count." + condition) 
end

header.push("Annotation")

dbvalues = Hash.new
pfam2go = Hash.new
tigrfams2go = Hash.new

if (opt.database)
  header.push("Taxon-ID", "Taxonomy", "Swiss-ID", "Swiss-Def", "GOS Cluster")
  header.push("Phytax Cluster", "Kegg-ID", "Kegg Definition", "KO", "Pathway")
  header.push("Pfam", "Pfam-Def", "pfam2go", "Tigrfams", "Tigrfams-Def", "tigrfams2go")
  query =  "SELECT phylodb_seq_id, annotation, taxon_id, taxonomy, swiss, swiss_def, "
  query += "gos_cluster_id, phytax_cluster_id, kegg, kegg_def, ko, pathway, "
  query += "pfam, pfam_def, NULL, tigrfams, tigrfams_def, NULL "
  query += "FROM phylodb_annotation.summary_ann WHERE phylodb_seq_id IN ('"
  query += total.keys.join("','") + "')"
  DataMapper.setup(:default, "mysql://access:access@mysql-lan-pro/phylodb_annotation")
  STDERR.printf("Loading annotation...\n")
  repository(:default).adapter.select(query).each do |line|
    row =  line.to_a
    tigrfams2go[line.tigrfams.to_s] = ""
    pfam2go[line.pfam.to_s] = ""
    dbvalues[row.shift] = row
  end
  STDERR.printf("Loading tigrfams...\n")
  query = "SELECT tigrfams, go FROM tigrfams2go WHERE tigrfams IN ('"
  query += tigrfams2go.keys.join("','") + "')"
  repository(:default).adapter.select(query).each do |line|
    tigrfams2go[line.tigrfams] += line.go + " "
  end
  STDERR.printf("Loading pfams...\n")
  query = "SELECT pfam, go FROM pfam2go WHERE pfam IN ('"
  query += pfam2go.keys.join("','") + "')"
  repository(:default).adapter.select(query).each do |line|
    pfam2go[line.pfam] += line.go + " "
  end
end
header.push("R")

print header.to_csv

STDERR.printf("Writing spreadsheet...\n")
total.keys.sort {|x, y| total[y] <=> total[x]}.each do |prot|
  sp = species[prot]
  row = [prot, sp]
  conditions.each do |condition|
    row.push(protHits[prot][condition])
  end
  row.push(total[prot])
  conditions.each do |condition|
    protHits[prot][condition] = 0 if (!protHits[prot][condition])
    row.push(protHits[prot][condition]/condTot[condition].to_f)
  end
  conditions.each do |condition|
    speciesHits[sp][condition] = 0 if speciesHits[sp][condition].nil?
    row.push(protHits[prot][condition]/speciesHits[sp][condition].to_f)
  end
  conditions.each do |condition|
    if (geneHits[sp][condition])
      row.push(geneHits[sp][condition].keys.size)
    else
      row.push(0)
    end
  end
  conditions.each do |condition|
    row.push(speciesHits[sp][condition])
  end
  if (opt.database)
    if (dbvalues[prot])
      p dbvalues[prot] + " " + prot if prot =~/EST/
      t = dbvalues[prot][12]
      if (t)
        dbvalues[prot][14] = tigrfams2go[t]
      end
      t = dbvalues[prot][9]
      if (t)
        dbvalues[prot][11] = pfam2go[t]
      end
      row += dbvalues[prot]
    else
      query = "SELECT annotation FROM phylodb.proteins WHERE name = '#{prot}'"
      row.push(repository(:default).adapter.select(query).first)
      16.times {row.push("")}
    end
  else
    row.push(annotation[prot])
  end
  row.push(GeneExpression.rvalue(conditions.collect{|x| condTot[x]}, 
    conditions.collect{|x| protHits[prot][x]}))
  print row.to_csv
end

print (["",""] + conditions.collect{|x| condTot[x]}).to_csv



