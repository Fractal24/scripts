#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'rubygems'
require 'apis'
require 'csv'
opt = OpenStruct.new

opt.storage = "misc_apis"
opt.database = "combodb"
opt.host = "mysql-lan-pro.jcvi.org"
opt.f = nil

ARGV.options {|opts|
  opts.banner << " [dataset... dataset...]"
  opts.on("-d ", "--database ", String, 
        "query database (default #{opt.database})") {|t| opt.database = t}
  opts.on("-f ", "--file ", String, 
          "read used exclusion for species from csv file") {|t| opt.f = t}
  opts.on("-s ", "--storage ", String, "storage database (default #{opt.storage})") {|t| opt.storage = t}
  opts.on("-h ", "--host ", String, "database host (default #{opt.host})")
  opts.on("-y ", "--exclude ", String,
	  "exclude taxonomy matching regexp from run") {|t| opt.exclude = t}
  begin
    opts.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts opts
    exit(1)
  end
  if (ARGV.size < 1)
    STDERR.puts opts
    exit(1)
  end
}

ex = Hash.new
if (opt.f)
  CSV.foreach(opt.f) {|row|
    ex[row.first] = row.last
  }
end

storage = MySQL.new(opt.host, opt.storage, "apis", "apis_user")
db = MySQL.new(opt.host, opt.database, "apis", "apis_user")
db.tax

tot = Hash.new
counts = Hash.new
ARGV.each {|dataset|
  storage.query("select sequence.seq_name, kingdom, phylum, class from sequence left join classification on classification.dataset = sequence.dataset and classification.seq_name = sequence.seq_name where sequence.dataset = '#{dataset}' order by seq_name").each {|row|
    name, kingdom, phylum, cl = row
    sp = db.tax[name.split("-").last]["species"]
    tot[sp] = 0 if tot[sp].nil?
    counts[sp] = Hash.new if counts[sp].nil?
    if (kingdom == "Eukaryota" || phylum == "Cyanobacteria")
      kingdom = phylum
      phylum = cl
    end
    kingdom = "No Tree" if kingdom.nil?
    kingdom = "No Tree" if kingdom == "Undefined"
    tot[sp] += 1.0
    tot[kingdom] = 0 if tot[kingdom].nil?
    tot[kingdom] += 1
      counts[sp][kingdom] = 0 if counts[sp][kingdom].nil?
    counts[sp][kingdom] += 1
    }
  }

kingdoms = (tot.keys - counts.keys).sort {|x, y| tot[y] <=> tot[x]}

printf("Species")
printf(",Exclusion") if (opt.f)
kingdoms.each {|kingdom|
  printf(",%s", kingdom)
}
printf("\n")


counts.keys.sort.each {|sp|
  printf("%s", sp)
  printf(",%s", ex[sp]) if (opt.f)
  kingdoms.each {|kingdom|
    counts[sp][kingdom] = 0 if counts[sp][kingdom].nil?
    printf(",%3.1f%%", counts[sp][kingdom]*100/tot[sp])
  }
  printf("\n")
}
