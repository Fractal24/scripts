#!/usr/bin/env ruby 

require 'rubygems'
require 'bio'    
require 'optimist'

ARGV.push("--help") if ARGV.empty?
opts = Optimist::options do
  banner File.basename($0)
  opt :input, "Input fasta file", :required=>true, :type=>:string
  opt :gtf, "Input gtf file", :required=>true, :type=>:string
  opt :ann, "Input annotation file", :required=>true, :type=>:string
end

contigs = Hash.new
strands = Hash.new
exons = Hash.new
seen = Hash.new

File.new(opts.gtf).each do |line|
	contig, source, type, start, stop, d, frame, d, feature = line.chomp.split("\t")
	next if contig =~/Spike/
	start = start.to_i
  stop = stop.to_i
  if feature =~/transcript_id \"([^\"]*)\"/
  	name = $1
  else
  	name = nil
  end
  contigs[name] = contig
  seen[contig] = true
  strands[name] = frame
  start, stop = stop, start if frame == "-"
  if type == "exon"
  	exons[name] = [] if !exons[name]
  	exons[name].push([start, stop])
  end
end

elements = File.new(File.basename(opts.input, ".fa") + "_genetic_elements.dat", "w")
Bio::FlatFile.new(Bio::FastaFormat, File.new(opts.input)).each do |seq|
	next if seq.entry_id =~/Spike/ || !seen[seq.entry_id]
	fname = seq.entry_id + ".fna"
	if seq.entry_id =~/mito/
		circular = "Y"
		type = ":MT"
	elsif seq.entry_id =~/chloro/
		circular = "Y"
		type = ":PLASMID"
	else
		circular = "N"
		type = ":CHRSM"
	end
	fna = File.new(fname, "w")
	fna.print seq
	fna.close
	elements.printf("ID\t%s\nNAME\t%s\nTYPE\t%s\nCIRCULAR?\t%s\nANNOT-FILE\t%s\nSEQ-FILE\t%s\n//\n", 
			seq.entry_id, seq.entry_id, type, circular, seq.entry_id + ".pf", fname)
end
elements.close


functions = Hash.new
ec = Hash.new
File.new(opts.ann).each do |line|
	fields = line.chomp.split("\t")
	org, name = fields.shift, fields.shift
	func = fields[3].split(/; |\|\| /).last
	if func.index("[EC:")
		func, ecnum = func.split("[EC:", 2)
		ecnum.gsub!("]","")
		ec[name] = ecnum.split(" ").find_all {|x| x.index("-").nil?}
		func = "ORF" if (func =~/hypothetical/)
		functions[name] = func.rstrip.lstrip
	end
end

def calcIntrons(exons, strand)
	introns = ""
	if strand == "+"
		addit = 1
		exons.sort!{|x,y| x[0] <=> y[0]}
	else
		addit = -1
		exons.sort!{|x, y| y[0] <=> x[0]}
	end
	0.upto(exons.size - 2) do |i|
		istart = exons[i][1]+addit
		iend = exons[i+1][0]-addit
		introns += "INTRON\t" + istart.to_s + "-" + iend.to_s + "\n"
	end
	[exons.first[0], exons.last[1], introns]
end

contigs.values.uniq.sort.each do |contig|
	pf = File.new(contig + ".pf", "w")
	contigs.keys.sort.each do |name|
		if contigs[name] == contig
			start, stop, introns = calcIntrons(exons[name], strands[name])
			pf.printf("ID\t%s\nNAME\t%s\nSTARTBASE\t%s\nENDBASE\t%s\nPRODUCT-TYPE\t\P\n",
				name, name, start.to_s, stop.to_s)
			pf.print introns if exons[name].size > 1
			functions[name] = "ORF" if !functions[name]
			pf.printf("FUNCTION\t%s\n", functions[name])
			if ec[name]
				ec[name].each do |num|
					pf.printf("EC\t%s\n", num)
				end
			end
			pf.printf("//\n")
		end
	end
	pf.close
end
