#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'csv'
require 'ZFile'
require 'sqlite3'


opt = OpenStruct.new
opt.hmm = nil
opt.go = nil
opt.kegg = nil
opt.ec = nil

o = OptionParser.new
o.banner << " csv [...csv]"
o.on("-e ", "--ec ", String, "KEGG enzyme ec mapping") {|t| opt.ec = t}
o.on("-g ", "--pfam2go ", String, "PFAM to GO mapping") {|t| opt.go = t}
o.on("-k ", "--kegg ", String, "KEGG blast btab file") {|t| opt.kegg = t}
o.on("-h ", "--hmm ", String, "HMM tbl file") {|t| opt.hmm = t}

begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1)
  STDERR << o
  exit(1)
end

go = Hash.new
hmm = Hash.new
ec = Hash.new
ko = Hash.new

if (opt.ec)
  STDERR << "Loading EC numbers...\n"
  ZFile.new(opt.ec).each do |line|
    kname, num = line.chomp.split("\t")
    kname.gsub!("ko:","")
    num.gsub!("ec:","")
    ec[kname] = "" if !ec[kname]
    ec[kname] += num + " "
  end
end

if (opt.hmm)
  STDERR << "Loading HMMs...\n"
  count = 0
  ZFile.new(opt.hmm).each do |line|
    fields = line.chomp.split(" ")
    model, d, pep, s, e = fields
    if (e.to_f < 1e-5)
      hmm[pep] = "" if ! hmm[pep]
      hmm[pep] += model + " "
    end
    count += 1
    STDERR << "Loaded #{count} lines of hmm...\n" if count%500000 == 0
  end
end

if (opt.kegg)
  STDERR << "Loading KEGG blast...\n"
  count = 0
  ZFile.new(opt.kegg).each do |line|
    fields = line.chomp.split("\t")
    pep = fields[0]
    if (fields[14]=~/(K0[0-9]+)/)
      ko[pep] = $1
    end
    count += 1
    STDERR << "Loaded #{count} lines of kegg...\n" if count%500000 == 0
  end
end

if (opt.go)
  STDERR << "Loading pfam2go...\n"
  ZFile.new(opt.go).each do |line|
    fields = line.chomp.split(" ")
    pfam = fields[0].gsub!("Pfam:","")
    go[pfam] = "" if ! go[pfam]
    go[pfam] += fields.last + " "
  end
end

def getGo(hmmList, go)
  gline = []
  return "" if !hmmList
  hmmList.split(" ").each do |h|
    gline.push(go[h]) if (go[h])
  end
  gline.join(" ").split(" ").uniq.sort.join(" ")
end

ARGV.each do |file|
  tab = File.basename(file).split(".csv").first + ".tab"
  out = File.new(tab, "w")
  out.print ["peptide_id","library_id","com_name","com_name_src","go_id","go_src",
  "ec_id","ec_src","hmm_id","apis_ncbi_id", "blast_evalue", "blast_pid", "blast_cov", 
  "filter", "ko_id","ko_src"].to_csv(:col_sep=>"\t")
  ZFile.new(file).each do |line|
    line = line.parse_csv
    sname, dataset, len, ann, tax, taxid, blastid, blastann, blaste, blastident, blastcov = line
    next if sname == "Seq Name"
    meta = [sname, dataset, ann, "APIS", getGo(hmm[sname],go), "pfam2go", ec[ko[sname]], "ko_enzyme", 
    hmm[sname], taxid, blaste, blastident, blastcov, "", ko[sname], "kegg-genes_20110830"]
    out.print meta.to_csv(:col_sep=>"\t")
  end
  out.close
end