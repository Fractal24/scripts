#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'csv'

# wrapper to handle compressed files transparently
class ZFile < File
  def self.new(fn,options="r")
    if (options == "r")
      if fn == "-"
        result = f = $stdin
        if block_given?
          result = yield f
        end
      elsif fn =~ /\.gz$/
        result = f = IO.popen("gunzip -c #{fn}")
        if block_given?
          result = yield f
        end
      elsif fn =~ /\.bz2$/
        result = f = IO.popen("bunzip2 -c #{fn}")
        if block_given?
          result = yield f
        end
      else
        result = f = File.new(fn,options)
        if block_given?
          result = yield f
        end
      end
    else
      result = f = File.new(fn,options)
      if block_given?
        result = yield f
      end
      f.close
    end
    return result
  end  
end


opt = OpenStruct.new
opt.hmm = nil
opt.go = nil
opt.kegg = nil
opt.ec = nil
opt.taxon = nil

o = OptionParser.new
o.banner << " csv [...csv]"
o.on("-e ", "--ec ", String, "KEGG enzyme ec mapping gene2ec") {|t| opt.ec = t}
o.on("-g ", "--hmm_mapping ", String, "HMM to GO mapping") {|t| opt.go = t}
o.on("-k ", "--kegg ", String, "KEGG blast btab file") {|t| opt.kegg = t}
o.on("-h ", "--hmm ", String, "HMM tbl file") {|t| opt.hmm = t}
o.on("-t ", "--kegg-taxon  ", String, "KEGG taxon file") {|t| opt.taxon = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1)
  STDERR << o
  exit(1)
end

go = Hash.new
hmm = Hash.new
ec = Hash.new
taxon = Hash.new
blast = Hash.new

if (opt.taxon)
   STDERR << "Loading kegg_taxon.tab...\n"
  ZFile.new(opt.taxon).each do |line|
    t, n = line.chomp.split("\t")
    taxon[t] = n
  end
end

if (opt.ec)
  STDERR << "Loading EC numbers...\n"
  ZFile.new(opt.ec).each do |line|
    name, num = line.chomp.split("\t")
    if (!ec[name])
      ec[name] = num
    else
      ec[name] += "||" + num
    end
  end
end

if (opt.hmm)
  STDERR << "Loading HMMs...\n"
  if (File.exists?(opt.hmm + ".serialized"))
    data = File.read(opt.hmm+".serialized")
    hmm=Marshal::load(data)
    data = nil
  else
    count = 0
    ZFile.new(opt.hmm).each do |line|
      fields = line.chomp.split(" ")
      model, d, pep, s, e = fields
      if (e.to_f < 1e-5)
        if (!hmm[pep])
          hmm[pep] = model
        else 
          hmm[pep] += "||" + model
        end
      end
      count += 1
      STDERR << "Loaded #{count} lines of hmm...\n" if count%500000 == 0
    end
    STDERR << "Writing Serialized hmm...\n"
    hmm_serialized = Marshal::dump(hmm)
    out=File.new(opt.hmm + ".serialized", "w")
    out.print hmm_serialized
    out.close
    hmm_serialized = nil
  end
end

if (opt.kegg)
  STDERR << "Loading KEGG blast...\n"
  if (File.exists?(opt.kegg + ".serialized"))
    data = File.read(opt.kegg+".serialized")
    blast=Marshal::load(data)
    data=nil
  else
    count = 0
    ZFile.new(opt.kegg).each do |line|
      query,acc,qlen,algorithm,userid,subject,
      qstart,qend,sstart,send,alignmentlength,matches,score,
      score,targetdescription,queryframe,queryframe,queryframe,
      significance, evalue = line.chomp.split("\t")
      ko = line.scan(/K[0-9]{5}/).uniq.join("||")
      coverage = (100*(send.to_i-sstart.to_i).abs/qlen.to_i)/100.0
      pid = (100*matches.to_i/alignmentlength.to_i)/100.0
      blast[query] = [ko.to_s, subject.to_s, evalue.to_s, pid.to_s, coverage.to_s].join("\t")
      count += 1
      STDERR << "Loaded #{count} lines of blast...\n" if count%500000 == 0
    end
    STDERR << "Writing Serialized blast...\n"
    kegg_serialized = Marshal::dump(blast)
    out=File.new(opt.kegg + ".serialized", "w")
    out.print kegg_serialized
    out.close
    kegg_serialized = nil
  end
end

if (opt.go)
  STDERR << "Loading hmm_mapping.tab...\n"
  ZFile.new(opt.go).each do |line|
    fields = line.chomp.split(" ")
    h, gonum, type = fields
    if (type == "GO")
      go[h] = "" if ! go[h]
      go[h] += gonum + " "
    end
  end
end

def getGo(hmmList, go)
  gline = []
  return "" if !hmmList
  hmmList.split("||").each do |h|
    if (go[h])
      gline.push(go[h])
    end
  end
  gline.join(" ").split(" ").uniq.sort.join("||")
end


ARGV.each do |file|
  tab = File.basename(file).split(".csv").first + ".tab"
  out = File.new(tab, "w")
  out.print ["peptide_id","library_id","com_name","com_name_src","go_id","go_src",
  "ec_id","ec_src","hmm_id","kegg_ncbi_id", "blast_evalue", "blast_pid", "blast_cov", 
  "filter", "ko_id","ko_src"].to_csv(:col_sep=>"\t")
  ZFile.new(file).each do |line|
    line = line.parse_csv
    sname, dataset, len, ann = line
    next if sname == "Seq Name"
    dataset = File.basename(file).split(".").first
    ann = ann.to_s
    ann.gsub!(" || ","||")
    downcased = [] # uniqeify anns case insensitive 
    ann = ann.split("||").inject([]) do |result,h| 
      unless downcased.include?(h.downcase);
        result << h
        downcased << h.downcase
      end;
      result
    end
    ann = ann.join("||")
    if (blast[sname])
      ko, kegg, evalue, percentId, coverage = blast[sname].split("\t")
    else
      ko, kegg, evalue, percentId, coverage = [nil, nil, nil, nil, nil]
    end

    taxid = taxon[kegg.to_s.split(":").first]
    gos = getGo(hmm[sname],go)
    if (gos != "")
      gosrc = hmm[sname]
    else
      gosrc = ""
    end
    meta = [sname, dataset, ann, "APIS", gos, gosrc, ec[kegg], kegg, 
      hmm[sname], taxid, evalue, percentId, coverage, 
      "", ko, kegg]
    meta = meta.collect{|x| if (x=="");nil;else x;end}
    out.print meta.to_csv(:col_sep=>"\t")
  end
  out.close
end