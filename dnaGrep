#!/usr/bin/env ruby

require 'bio'
require 'optimist'
require 'ZFile'

ARGV.push("--help") if ARGV.empty?
opts = Optimist::options do
  banner File.basename($0)
  opt :input, "fasta file", :required=>true, :type=>:string
  opt :pattern, "pattern to match", :required=>true, :type=>:string
  opt :gaps, "ignore gaps"
  opt :highlight, "highlight matches in lower case"
  opt :revcomp, "reverse complement pattern"
  opt :verse, "show sequences not matching motif"
  opt :slow, "use slow matching allowing gaps"
end

pat = opts.pattern.tr("NnX",".").upcase
if opts.gaps
  npat = ""
  pat.length.times do |i|
    npat += pat[i]+"-*"
  end
  pat = npat
end

if opts.revcomp
  pat = Bio::Sequence::NA.new(pat).reverse_complement.seq.upcase
end

pat.gsub!("V","[G|A|C]")
pat.gsub!("B","[G|T|C]")
pat.gsub!("H","[A|T|C]")
pat.gsub!("D","[G|A|T]")
pat.gsub!("K","[G|T]")
pat.gsub!("S","[G|C]")
pat.gsub!("W","[A|T]")
pat.gsub!("M","[A|C]")
pat.gsub!("Y","[C|T]")
pat.gsub!("R","[A|G]")

def slow_match(seq,pat)
  j = 0
  pos = nil
  match = ""
  0.upto(seq.length) do |i|
    p match
    if seq[i] != "." && seq[i] != "-"
      if seq[i] == pat[j]
        pos = i if pos.nil?
        j += 1
      else
        j = 0
        match = ""
        pos = nil
      end
      break if j==pat.length
    end
    match += seq[i].to_s
  end
  [pos, match]
end

Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(opts.input)).each do |seq|
  s = seq.seq.upcase
  if opts.slow
    found, match = slow_match(s, pat)
  else
    found = s.index(/(#{pat})/)
    match = $1
  end
  if !found && opts.verse
    printf("%s\n", seq.entry_id)
  elsif found && !opts.verse
    if !opts.highlight
      printf("%s\t%s\t%d\n", seq.entry_id, match, found+1)
    else
      print Bio::Sequence.new(s.gsub(match,match.downcase)).to_fasta(seq.definition,60)
    end
  end
end
