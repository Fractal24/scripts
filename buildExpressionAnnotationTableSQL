#!/usr/bin/env ruby 

require 'rubygems'
require 'trollop'
require 'bio'
require 'fcsv'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :ann, "RNASeq Annotation table", :type=>:string, :required=>true
  opt :tmhmm, "TMHMM hits output", :type=>:string, :required=>true
  opt :org, "Organism abbrevation", :type=>:string, :required=>true
  opt :experiment, "experiment (needed if counts provided)", :type=>:string
  opt :contigs, "optional assembly cds to generate gene lengths", :type=>:string
end


tmhmm = Hash.new
File.new(opts.tmhmm).each do |line|
	if line =~ /Number of predicted TMHs/
		fields = line.chomp.split(" ")
		tmhmm[fields[1]] = fields.last
	end
end

if (opts.contigs)
	lfile = File.new(opts.org + "_genlen.txt", "w")
	Bio::FlatFile.new(Bio::FastaFormat, File.new(opts.contigs)).each do |seq|
		lfile.print [opts.org, seq.entry_id, seq.length].to_csv(:col_sep=>"\t")
	end
	lfile.close
end


fheaders = nil
sheaders = nil
cfile = nil
sfile = nil
printed = Hash.new
afile = File.new(opts.org + "_ann.txt", "w")
File.new(opts.ann).each do |line|
	fields = line.chomp.split("\t")
	fields, counts = fields[0..27], fields[28..-1]
	transcript = fields.first
	if (transcript == "orf_id")
		fheaders, sheaders = fields, counts
		if sheaders && sheaders.length > 2
			if !opts.experiment
				STDERR << "For counts data, you need to specify the experiment\n"
				exit(1)
			end
			cfile = File.new(opts.experiment + "_counts.txt", "w")
			sfile = File.new(opts.experiment + "_sample_desc.txt","w")
		end
	else
		row  = [opts.org] + fields
		if (tmhmm[transcript])
			row += [tmhmm[transcript]]
		else
			row += [""]
		end
                while (row.size < 30)
                  row += [""]
                end
		afile.print row.to_csv(:col_sep=>"\t")
		if (cfile)
			sheaders.each do |sample|
				if sample !~/^norm_/
					sample = sample.split("-PE").first
					nrow = [opts.experiment , sample, transcript, counts.shift]
					srow = [opts.experiment, sample, "", opts.org]
					cfile.print nrow.to_csv(:col_sep=>"\t")
					if (!printed[sample])
						sfile.print srow.to_csv(:col_sep=>"\t")
						printed[sample] = true
					end
				end
			end
		end
	end
end

afile.close
cfile.close if cfile
sfile.close if sfile
