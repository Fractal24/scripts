#!/usr/bin/env ruby

require 'rubygems'
require 'bio'
require 'FastaDB'

prot = false
if (ARGV.index("-p"))
  ARGV.delete("-p")
  prot = true
end

if (ARGV.size != 3)
  STDERR.printf("usage: %s [-p] tblastn-file fasta-file abbr\n", $0)
  exit(1)
end

file, fasta, abbr = ARGV

db = FastaDB.new(fasta)

query = ""
contig = ""
start = 0
stop = 0
orfName = abbr + "0000"
seen = Hash.new

def processHsp(db, query, contig, start, stop, orfName, prot, seen)
  seq = db.getFasta(contig)
  if (start < stop)
    subseq = Bio::Sequence::NA.new(seq[start - 1 .. stop - 1])
  else
    subseq = Bio::Sequence::NA.new(seq[stop - 1 .. start - 1])
    subseq = subseq.complement
  end
  subseq = subseq.translate(1, 11) if (prot)
  if (subseq.length > 20)
    orfName.succ!
    header = sprintf("%s %s %7d %7d", orfName, contig, start, stop)
    print subseq.to_fasta(header, 60) if (!seen[contig])
    seen[contig] = true
  end
end

File.new(file).each {|line|
  if (line =~/^Query=[\ ]*([^\ ]*) /)
    query = $1
    start = 0
    stop = 0
  elsif (line =~/^>/)
    processHsp(db, query, contig, start, stop, orfName, prot, seen) if (start > 0)
    start = 0
    stop = 0
    h, contig = line.split(">")
    contig.strip!
    h, contig = contig.split("||") if (contig.index("||")) 
  elsif (line =~/^Sbjct/)
    sb, s, al, sp = line.split(" ")
    start = s.to_i if (start == 0)
    stop = sp.to_i if (stop == 0 || (stop - sp.to_i).abs < 1000)
  elsif (line =~/^Lambda/)
    next if contig == ""
    processHsp(db, query, contig, start, stop, orfName, prot, seen) if (start > 0)
  end
}
